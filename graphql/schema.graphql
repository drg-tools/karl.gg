"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

scalar JSON

type Query {
    #    users: [User!]! @paginate(defaultCount: 10)
    #    user(id: ID @eq): User @find
    characters: [Character!]! @paginate(defaultCount: 10) @guard
    character(id: ID @eq): Character @find
    loadouts: [Loadout!]! @paginate(defaultCount: 10) @guard
    loadout(id: ID @eq): Loadout @find
    guns: [Gun!]! @paginate(defaultCount: 10) @guard
    gun(id: ID @eq): Gun @find
    equipments: [Equipment!]! @paginate(defaultCount: 20) @guard
    equipment(id: ID @eq): Equipment @find
    overclocks: [Overclock!]! @paginate(defaultCount: 10) @guard
    ocerclock(id: ID @eq): Overclock @find
    equipment_mods: [EquipmentMod!]! @paginate(defaultCount: 10) @guard
    equipment_mod(id: ID @eq): EquipmentMod @find
    throwables: [Throwable!]! @paginate(defaultCount: 10) @guard
    throwable(id: ID @eq): Throwable @find
    mods: [Mod!]! @paginate(defaultCount: 10) @guard
    mod(id: ID @eq): Mod @find
    me: User @auth
    getVoteStatus(id: Int! @eq): Int!
    myLoadouts(userId: [Int!] @in(key: "user_id")): [Loadout!]! @all
}

type Mutation {
    createLoadout(
        name: String! @rules(apply: ["strictly_profane"])
        description: String @rules(apply: ["strictly_profane"])
        character_id: Int!
        mods: [Int!]!
        overclocks: [Int!]!
        equipment_mods: [Int!]!
        throwable_id: Int!
    ): Loadout @field(resolver: "App\\GraphQL\\Mutations\\CreateLoadout")

    updateLoadout(
        id: Int!
        name: String! @rules(apply: ["strictly_profane"])
        description: String @rules(apply: ["strictly_profane"])
        character_id: Int!
        mods: [Int!]!
        overclocks: [Int!]!
        equipment_mods: [Int!]!
        throwable_id: Int!
    ): Loadout @field(resolver: "App\\GraphQL\\Mutations\\UpdateLoadout") @guard @can(ability: "update", find: "id")

    upVoteLoadout(
        id: Int!
    ): Loadout @field(resolver: "App\\GraphQL\\Mutations\\UpvoteLoadout") @guard

    deleteLoadout(id: ID!): Loadout @delete @guard @can(ability: "delete", find: "id")
}

type User {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Character {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    guns: [Gun]
    mods: [Mod]
    overclocks: [Overclock]
    equipments: [Equipment]
    equipment_mods: [EquipmentMod]
    throwables: [Throwable]
}

type Gun {
    id: ID!
    name: String!
    gun_class: String!
    character_slot: Int!
    mods: [Mod]
    overclocks: [Overclock]
    character: Character @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    json_stats: JSON!
}

type Mod {
    id: ID!
    mod_name: String!
    json_stats: JSON!
    text_description: String
    icon: String!
    mod_tier: Int!
    mod_index: String!
    credits_cost: Int!
    magnite_cost: Int!
    bismor_cost: Int!
    umanite_cost: Int!
    croppa_cost: Int!
    enor_pearl_cost: Int!
    jadiz_cost: Int!
    character: Character @belongsTo
    gun: Gun @belongsTo
    mod_type: String!
    patch_id: Int!
    created_at: DateTime!
    updated_at: DateTime!
}

type Overclock {
    id: ID!
    overclock_name: String!
    json_stats: JSON!
    text_description: String
    icon: String!
    overclock_index: Int!
    credits_cost: Int!
    magnite_cost: Int!
    bismor_cost: Int!
    umanite_cost: Int!
    croppa_cost: Int!
    enor_pearl_cost: Int!
    jadiz_cost: Int!
    character: Character @belongsTo
    gun: Gun @belongsTo
    overclock_type: String!
    patch_id: Int!
    created_at: DateTime!
    updated_at: DateTime!
}

type Throwable {
    id: ID!
    name: String!
    json_stats: JSON!
    description: String
    icon: String!
    credits_cost: Int!
    magnite_cost: Int!
    bismor_cost: Int!
    umanite_cost: Int!
    croppa_cost: Int!
    enor_pearl_cost: Int!
    jadiz_cost: Int!
    character: Character @belongsTo
    patch_id: Int!
    created_at: DateTime!
    updated_at: DateTime!
}

type Equipment {
    id: ID!
    name: String!
    json_stats: JSON!
    description: String
    icon: String!
    character: Character @belongsTo
    equipment_mods: [EquipmentMod]
    eq_type: String!
    patch_id: Int!
    created_at: DateTime!
    updated_at: DateTime!
}

type EquipmentMod {
    id: ID!
    mod_name: String!
    json_stats: JSON!
    description: String
    icon: String!
    mod_tier: Int!
    mod_index: String!
    credits_cost: Int!
    magnite_cost: Int!
    bismor_cost: Int!
    umanite_cost: Int!
    croppa_cost: Int!
    enor_pearl_cost: Int!
    jadiz_cost: Int!
    character: Character @belongsTo
    equipment: Equipment @belongsTo
    mod_type: String!
    patch_id: Int!
    created_at: DateTime!
    updated_at: DateTime!
}

type Loadout {
    id: ID!
    name: String!
    description: String
    character: Character @belongsTo
    creator: User @belongsTo
    mods: [Mod!] @belongsToMany
    created_at: DateTime!
    updated_at: DateTime
    overclocks: [Overclock!]! @belongsToMany
    equipment_mods: [EquipmentMod!]! @belongsToMany
    throwable: Throwable @hasOne
    votes: Int! @field(resolver: "App\\GraphQL\\Queries\\GetLoadoutVotes")
}
