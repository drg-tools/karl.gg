/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Comments"] = factory();
	else
		root["Comments"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/js/comments.js":
/*!*****************************************!*\
  !*** ./resources/assets/js/comments.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _util_scrollTo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/scrollTo */ \"./resources/assets/js/util/scrollTo.js\");\n/* harmony import */ var _util_hashParam__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/hashParam */ \"./resources/assets/js/util/hashParam.js\");\n/* harmony import */ var _util_queryString__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/queryString */ \"./resources/assets/js/util/queryString.js\");\n/* harmony import */ var iframe_resizer_js_iframeResizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! iframe-resizer/js/iframeResizer */ \"./node_modules/iframe-resizer/js/iframeResizer.js\");\n/* harmony import */ var iframe_resizer_js_iframeResizer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(iframe_resizer_js_iframeResizer__WEBPACK_IMPORTED_MODULE_3__);\nvar _excluded = [\"el\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\nvar Comments = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   */\n  function Comments(_ref) {\n    var el = _ref.el,\n        options = _objectWithoutProperties(_ref, _excluded);\n\n    _classCallCheck(this, Comments);\n\n    this.el = el;\n    var defaults = {\n      url: '/comments'\n    };\n    this.options = _objectSpread(_objectSpread({}, defaults), options);\n\n    if (typeof this.el === 'string') {\n      this.el = document.querySelector(this.el);\n    }\n\n    if (!this.el) {\n      throw new Error('[comments] Element not found.');\n    }\n\n    this.el.innerHTML = '';\n    this.initSpinner();\n    this.initIframe();\n  }\n  /**\n   * Initialize the spinner.\n   */\n\n\n  _createClass(Comments, [{\n    key: \"initSpinner\",\n    value: function initSpinner() {\n      this.spinner = document.createElement('div');\n      this.spinner.classList.add('comments__spinner');\n      this.el.appendChild(this.spinner);\n    }\n    /**\n     * Initialize the iframe.\n     */\n\n  }, {\n    key: \"initIframe\",\n    value: function initIframe() {\n      var _this = this;\n\n      this.iframe = document.createElement('iframe');\n      this.iframe.scrolling = 'no';\n      this.iframe.src = this.buildUrl();\n      this.iframe.classList.add('comments__iframe');\n\n      this.iframe.onload = function () {\n        _this.spinner.style.display = 'none';\n        _this.iframe.style.opacity = 1;\n      };\n\n      this.el.appendChild(this.iframe);\n      iframe_resizer_js_iframeResizer__WEBPACK_IMPORTED_MODULE_3___default()({\n        onMessage: function onMessage(_ref2) {\n          var iframe = _ref2.iframe,\n              _ref2$message = _ref2.message,\n              type = _ref2$message.type,\n              position = _ref2$message.position;\n\n          if (type === 'scroll') {\n            var rect = iframe.getBoundingClientRect();\n            var scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n            setTimeout(function () {\n              (0,_util_scrollTo__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(position + rect.top + scrollTop);\n            }, 50);\n          }\n        }\n      }, this.iframe);\n    }\n    /**\n     * Build the url.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: \"buildUrl\",\n    value: function buildUrl() {\n      var o = this.options;\n      var data = o.data ? typeof o.data === 'function' ? o.data() : o.data : {};\n      var origin = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');\n      var permalink = o.permalink || (location.origin || origin) + location.pathname + location.search;\n\n      var params = _objectSpread(_objectSpread({}, data), {}, {\n        permalink: permalink,\n        order: o.order,\n        page_id: o.pageId,\n        per_page: o.perPage,\n        page: (0,_util_hashParam__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('page'),\n        target: (0,_util_hashParam__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('comment'),\n        commentable_id: o.commentableId,\n        commentable_type: o.commentableType\n      });\n\n      return o.url + (o.url.indexOf('?') > -1 ? '&' : '?') + (0,_util_queryString__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(params);\n    }\n  }]);\n\n  return Comments;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Comments);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/comments.js\n");

/***/ }),

/***/ "./resources/assets/js/util/hashParam.js":
/*!***********************************************!*\
  !*** ./resources/assets/js/util/hashParam.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ hashParam)\n/* harmony export */ });\n/**\r\n * Get param from the hash string.\r\n *\r\n * @param  {String} name\r\n * @param  {Any} _default\r\n * @return {Any}\r\n */\nfunction hashParam(name) {\n  var _default = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  var fragment = extract(window.location.search, '_escaped_fragment_');\n  var str = fragment ? \"#\".concat(fragment) : window.location.hash.replace('#!', '#');\n  return +extract(str, name, true) || _default;\n}\n/**\r\n * @param  {String} str\r\n * @param  {String} name\r\n * @param  {Boolean} isHash\r\n * @return {String|undefined}\r\n */\n\nfunction extract(str, name, isHash) {\n  name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  var regex = new RegExp((isHash ? '[\\\\#]' : '[\\\\?&]') + name + '=([^&#]*)');\n  var results = regex.exec(str);\n  return results ? decodeURIComponent(results[1].replace(/\\+/g, ' ')) : undefined;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3V0aWwvaGFzaFBhcmFtLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLFNBQVQsQ0FBb0JDLElBQXBCLEVBQWdEO0FBQUEsTUFBdEJDLFFBQXNCLHVFQUFYQyxTQUFXOztBQUM3RCxNQUFNQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxNQUFqQixFQUF5QixvQkFBekIsQ0FBeEI7QUFDQSxNQUFNQyxHQUFHLEdBQUdMLFFBQVEsY0FBT0EsUUFBUCxJQUFvQkUsTUFBTSxDQUFDQyxRQUFQLENBQWdCRyxJQUFoQixDQUFxQkMsT0FBckIsQ0FBNkIsSUFBN0IsRUFBbUMsR0FBbkMsQ0FBeEM7QUFFQSxTQUFPLENBQUNOLE9BQU8sQ0FBQ0ksR0FBRCxFQUFNUixJQUFOLEVBQVksSUFBWixDQUFSLElBQTZCQyxRQUFwQztBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNHLE9BQVQsQ0FBa0JJLEdBQWxCLEVBQXVCUixJQUF2QixFQUE2QlcsTUFBN0IsRUFBcUM7QUFDbkNYLEVBQUFBLElBQUksR0FBR0EsSUFBSSxDQUFDVSxPQUFMLENBQWEsTUFBYixFQUFxQixLQUFyQixFQUE0QkEsT0FBNUIsQ0FBb0MsTUFBcEMsRUFBNEMsS0FBNUMsQ0FBUDtBQUNBLE1BQU1FLEtBQUssR0FBRyxJQUFJQyxNQUFKLENBQVcsQ0FBQ0YsTUFBTSxHQUFHLE9BQUgsR0FBYSxRQUFwQixJQUFnQ1gsSUFBaEMsR0FBdUMsV0FBbEQsQ0FBZDtBQUNBLE1BQU1jLE9BQU8sR0FBR0YsS0FBSyxDQUFDRyxJQUFOLENBQVdQLEdBQVgsQ0FBaEI7QUFFQSxTQUFPTSxPQUFPLEdBQUdFLGtCQUFrQixDQUFDRixPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdKLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsR0FBMUIsQ0FBRCxDQUFyQixHQUF3RFIsU0FBdEU7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL0NvbW1lbnRzLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy91dGlsL2hhc2hQYXJhbS5qcz9hNWMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBHZXQgcGFyYW0gZnJvbSB0aGUgaGFzaCBzdHJpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZVxyXG4gKiBAcGFyYW0gIHtBbnl9IF9kZWZhdWx0XHJcbiAqIEByZXR1cm4ge0FueX1cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhc2hQYXJhbSAobmFtZSwgX2RlZmF1bHQgPSB1bmRlZmluZWQpIHtcclxuICBjb25zdCBmcmFnbWVudCA9IGV4dHJhY3Qod2luZG93LmxvY2F0aW9uLnNlYXJjaCwgJ19lc2NhcGVkX2ZyYWdtZW50XycpXHJcbiAgY29uc3Qgc3RyID0gZnJhZ21lbnQgPyBgIyR7ZnJhZ21lbnR9YCA6IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMhJywgJyMnKVxyXG5cclxuICByZXR1cm4gK2V4dHJhY3Qoc3RyLCBuYW1lLCB0cnVlKSB8fCBfZGVmYXVsdFxyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtICB7U3RyaW5nfSBzdHJcclxuICogQHBhcmFtICB7U3RyaW5nfSBuYW1lXHJcbiAqIEBwYXJhbSAge0Jvb2xlYW59IGlzSGFzaFxyXG4gKiBAcmV0dXJuIHtTdHJpbmd8dW5kZWZpbmVkfVxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdCAoc3RyLCBuYW1lLCBpc0hhc2gpIHtcclxuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxdJylcclxuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoKGlzSGFzaCA/ICdbXFxcXCNdJyA6ICdbXFxcXD8mXScpICsgbmFtZSArICc9KFteJiNdKiknKVxyXG4gIGNvbnN0IHJlc3VsdHMgPSByZWdleC5leGVjKHN0cilcclxuXHJcbiAgcmV0dXJuIHJlc3VsdHMgPyBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgJyAnKSkgOiB1bmRlZmluZWRcclxufVxyXG4iXSwibmFtZXMiOlsiaGFzaFBhcmFtIiwibmFtZSIsIl9kZWZhdWx0IiwidW5kZWZpbmVkIiwiZnJhZ21lbnQiLCJleHRyYWN0Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdHIiLCJoYXNoIiwicmVwbGFjZSIsImlzSGFzaCIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJkZWNvZGVVUklDb21wb25lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/util/hashParam.js\n");

/***/ }),

/***/ "./resources/assets/js/util/queryString.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/util/queryString.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ queryString)\n/* harmony export */ });\nvar encode = function encode(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function (x) {\n    return \"%\".concat(x.charCodeAt(0).toString(16).toUpperCase());\n  });\n};\n/**\r\n * Convert an object to a query string.\r\n *\r\n * @param  {Object} obj\r\n * @return {String}\r\n */\n\n\nfunction queryString(obj) {\n  return Object.keys(obj).map(function (key) {\n    var value = obj[key];\n\n    if (value === undefined) {\n      return '';\n    }\n\n    if (value === null) {\n      return encode(key);\n    }\n\n    return encode(key) + '=' + encode(value);\n  }).filter(function (x) {\n    return x.length > 0;\n  }).join('&');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3V0aWwvcXVlcnlTdHJpbmcuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQU1BLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQUFDLEdBQUc7QUFBQSxTQUFJQyxrQkFBa0IsQ0FBQ0QsR0FBRCxDQUFsQixDQUF3QkUsT0FBeEIsQ0FBZ0MsVUFBaEMsRUFBNEMsVUFBQUMsQ0FBQztBQUFBLHNCQUFRQSxDQUFDLENBQUNDLFVBQUYsQ0FBYSxDQUFiLEVBQWdCQyxRQUFoQixDQUF5QixFQUF6QixFQUE2QkMsV0FBN0IsRUFBUjtBQUFBLEdBQTdDLENBQUo7QUFBQSxDQUFsQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ2UsU0FBU0MsV0FBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDeEMsU0FBT0MsTUFBTSxDQUFDQyxJQUFQLENBQVlGLEdBQVosRUFBaUJHLEdBQWpCLENBQXFCLFVBQUFDLEdBQUcsRUFBSTtBQUNqQyxRQUFNQyxLQUFLLEdBQUdMLEdBQUcsQ0FBQ0ksR0FBRCxDQUFqQjs7QUFFQSxRQUFJQyxLQUFLLEtBQUtDLFNBQWQsRUFBeUI7QUFDdkIsYUFBTyxFQUFQO0FBQ0Q7O0FBRUQsUUFBSUQsS0FBSyxLQUFLLElBQWQsRUFBb0I7QUFDbEIsYUFBT2QsTUFBTSxDQUFDYSxHQUFELENBQWI7QUFDRDs7QUFFRCxXQUFPYixNQUFNLENBQUNhLEdBQUQsQ0FBTixHQUFjLEdBQWQsR0FBb0JiLE1BQU0sQ0FBQ2MsS0FBRCxDQUFqQztBQUNELEdBWk0sRUFZSkUsTUFaSSxDQVlHLFVBQUFaLENBQUM7QUFBQSxXQUFJQSxDQUFDLENBQUNhLE1BQUYsR0FBVyxDQUFmO0FBQUEsR0FaSixFQVlzQkMsSUFadEIsQ0FZMkIsR0FaM0IsQ0FBUDtBQWFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ29tbWVudHMvLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3V0aWwvcXVlcnlTdHJpbmcuanM/N2I1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlbmNvZGUgPSBzdHIgPT4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCkqXS9nLCB4ID0+IGAlJHt4LmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCl9YClcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IGFuIG9iamVjdCB0byBhIHF1ZXJ5IHN0cmluZy5cclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7U3RyaW5nfVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVlcnlTdHJpbmcgKG9iaikge1xyXG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChrZXkgPT4ge1xyXG4gICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XVxyXG5cclxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gZW5jb2RlKGtleSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodmFsdWUpXHJcbiAgfSkuZmlsdGVyKHggPT4geC5sZW5ndGggPiAwKS5qb2luKCcmJylcclxufVxyXG4iXSwibmFtZXMiOlsiZW5jb2RlIiwic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsIngiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsInF1ZXJ5U3RyaW5nIiwib2JqIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsInZhbHVlIiwidW5kZWZpbmVkIiwiZmlsdGVyIiwibGVuZ3RoIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/util/queryString.js\n");

/***/ }),

/***/ "./resources/assets/js/util/scrollTo.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/util/scrollTo.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ scrollTo)\n/* harmony export */ });\n/* harmony import */ var _vendor_zenscroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/vendor/zenscroll */ \"./resources/assets/js/vendor/zenscroll.js\");\n/* harmony import */ var _vendor_zenscroll__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vendor_zenscroll__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Scroll to the target element or Y position.\r\n *\r\n * @param {HTMLElement|Number} target\r\n * @param {Number} duration\r\n */\n\nfunction scrollTo(target) {\n  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  (_vendor_zenscroll__WEBPACK_IMPORTED_MODULE_0___default())[isNaN(target) ? 'to' : 'toY'](target, duration);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3V0aWwvc2Nyb2xsVG8uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ2UsU0FBU0MsUUFBVCxDQUFtQkMsTUFBbkIsRUFBMkM7QUFBQSxNQUFoQkMsUUFBZ0IsdUVBQUwsR0FBSztBQUN4REgsRUFBQUEsMERBQVMsQ0FBQ0ksS0FBSyxDQUFDRixNQUFELENBQUwsR0FBZ0IsSUFBaEIsR0FBdUIsS0FBeEIsQ0FBVCxDQUF3Q0EsTUFBeEMsRUFBZ0RDLFFBQWhEO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db21tZW50cy8uL3Jlc291cmNlcy9hc3NldHMvanMvdXRpbC9zY3JvbGxUby5qcz8xZGQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB6ZW5zY3JvbGwgZnJvbSAnQC92ZW5kb3IvemVuc2Nyb2xsJ1xyXG5cclxuLyoqXHJcbiAqIFNjcm9sbCB0byB0aGUgdGFyZ2V0IGVsZW1lbnQgb3IgWSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxOdW1iZXJ9IHRhcmdldFxyXG4gKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNjcm9sbFRvICh0YXJnZXQsIGR1cmF0aW9uID0gMjAwKSB7XHJcbiAgemVuc2Nyb2xsW2lzTmFOKHRhcmdldCkgPyAndG8nIDogJ3RvWSddKHRhcmdldCwgZHVyYXRpb24pXHJcbn1cclxuIl0sIm5hbWVzIjpbInplbnNjcm9sbCIsInNjcm9sbFRvIiwidGFyZ2V0IiwiZHVyYXRpb24iLCJpc05hTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/util/scrollTo.js\n");

/***/ }),

/***/ "./resources/assets/js/vendor/zenscroll.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/vendor/zenscroll.js ***!
  \*************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*eslint-disable*/\n\n/**\r\n * Zenscroll 4.0.0\r\n * https://github.com/zengabor/zenscroll/\r\n *\r\n * Copyright 2015–2017 Gabor Lenard\r\n *\r\n * This is free and unencumbered software released into the public domain.\r\n *\r\n * Anyone is free to copy, modify, publish, use, compile, sell, or\r\n * distribute this software, either in source code form or as a compiled\r\n * binary, for any purpose, commercial or non-commercial, and by any\r\n * means.\r\n *\r\n * In jurisdictions that recognize copyright laws, the author or authors\r\n * of this software dedicate any and all copyright interest in the\r\n * software to the public domain. We make this dedication for the benefit\r\n * of the public at large and to the detriment of our heirs and\r\n * successors. We intend this dedication to be an overt act of\r\n * relinquishment in perpetuity of all present and future rights to this\r\n * software under copyright law.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n * OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n * For more information, please refer to <http://unlicense.org>\r\n *\r\n */\n\n/*jshint devel:true, asi:true */\n\n/*global define, module */\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory()),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  \"use strict\"; // Detect if the browser already supports native smooth scrolling (e.g., Firefox 36+ and Chrome 49+) and it is enabled:\n\n  var isNativeSmoothScrollEnabledOn = function isNativeSmoothScrollEnabledOn(elem) {\n    return \"getComputedStyle\" in window && window.getComputedStyle(elem)[\"scroll-behavior\"] === \"smooth\";\n  }; // Exit if it’s not a browser environment:\n\n\n  if (typeof window === \"undefined\" || !(\"document\" in window)) {\n    return {};\n  }\n\n  var makeScroller = function makeScroller(container, defaultDuration, edgeOffset) {\n    // Use defaults if not provided\n    defaultDuration = defaultDuration || 999; //ms\n\n    if (!edgeOffset && edgeOffset !== 0) {\n      // When scrolling, this amount of distance is kept from the edges of the container:\n      edgeOffset = 9; //px\n    } // Handling the life-cycle of the scroller\n\n\n    var scrollTimeoutId;\n\n    var setScrollTimeoutId = function setScrollTimeoutId(newValue) {\n      scrollTimeoutId = newValue;\n    };\n    /**\r\n     * Stop the current smooth scroll operation immediately\r\n     */\n\n\n    var stopScroll = function stopScroll() {\n      clearTimeout(scrollTimeoutId);\n      setScrollTimeoutId(0);\n    };\n\n    var getTopWithEdgeOffset = function getTopWithEdgeOffset(elem) {\n      return Math.max(0, container.getTopOf(elem) - edgeOffset);\n    };\n    /**\r\n     * Scrolls to a specific vertical position in the document.\r\n     *\r\n     * @param {targetY} The vertical position within the document.\r\n     * @param {duration} Optionally the duration of the scroll operation.\r\n     *        If not provided the default duration is used.\r\n     * @param {onDone} An optional callback function to be invoked once the scroll finished.\r\n     */\n\n\n    var scrollToY = function scrollToY(targetY, duration, onDone) {\n      stopScroll();\n\n      if (duration === 0 || duration && duration < 0 || isNativeSmoothScrollEnabledOn(container.body)) {\n        container.toY(targetY);\n\n        if (onDone) {\n          onDone();\n        }\n      } else {\n        var startY = container.getY();\n        var distance = Math.max(0, targetY) - startY;\n        var startTime = new Date().getTime();\n        duration = duration || Math.min(Math.abs(distance), defaultDuration);\n\n        (function loopScroll() {\n          setScrollTimeoutId(setTimeout(function () {\n            // Calculate percentage:\n            var p = Math.min(1, (new Date().getTime() - startTime) / duration); // Calculate the absolute vertical position:\n\n            var y = Math.max(0, Math.floor(startY + distance * (p < 0.5 ? 2 * p * p : p * (4 - p * 2) - 1)));\n            container.toY(y);\n\n            if (p < 1 && container.getHeight() + y < container.body.scrollHeight) {\n              loopScroll();\n            } else {\n              setTimeout(stopScroll, 99); // with cooldown time\n\n              if (onDone) {\n                onDone();\n              }\n            }\n          }, 9));\n        })();\n      }\n    };\n    /**\r\n     * Scrolls to the top of a specific element.\r\n     *\r\n     * @param {elem} The element to scroll to.\r\n     * @param {duration} Optionally the duration of the scroll operation.\r\n     * @param {onDone} An optional callback function to be invoked once the scroll finished.\r\n     */\n\n\n    var scrollToElem = function scrollToElem(elem, duration, onDone) {\n      scrollToY(getTopWithEdgeOffset(elem), duration, onDone);\n    };\n    /**\r\n     * Scrolls an element into view if necessary.\r\n     *\r\n     * @param {elem} The element.\r\n     * @param {duration} Optionally the duration of the scroll operation.\r\n     * @param {onDone} An optional callback function to be invoked once the scroll finished.\r\n     */\n\n\n    var scrollIntoView = function scrollIntoView(elem, duration, onDone) {\n      var elemHeight = elem.getBoundingClientRect().height;\n      var elemBottom = container.getTopOf(elem) + elemHeight;\n      var containerHeight = container.getHeight();\n      var y = container.getY();\n      var containerBottom = y + containerHeight;\n\n      if (getTopWithEdgeOffset(elem) < y || elemHeight + edgeOffset > containerHeight) {\n        // Element is clipped at top or is higher than screen.\n        scrollToElem(elem, duration, onDone);\n      } else if (elemBottom + edgeOffset > containerBottom) {\n        // Element is clipped at the bottom.\n        scrollToY(elemBottom - containerHeight + edgeOffset, duration, onDone);\n      } else if (onDone) {\n        onDone();\n      }\n    };\n    /**\r\n     * Scrolls to the center of an element.\r\n     *\r\n     * @param {elem} The element.\r\n     * @param {duration} Optionally the duration of the scroll operation.\r\n     * @param {offset} Optionally the offset of the top of the element from the center of the screen.\r\n     * @param {onDone} An optional callback function to be invoked once the scroll finished.\r\n     */\n\n\n    var scrollToCenterOf = function scrollToCenterOf(elem, duration, offset, onDone) {\n      scrollToY(Math.max(0, container.getTopOf(elem) - container.getHeight() / 2 + (offset || elem.getBoundingClientRect().height / 2)), duration, onDone);\n    };\n    /**\r\n     * Changes default settings for this scroller.\r\n     *\r\n     * @param {newDefaultDuration} Optionally a new value for default duration, used for each scroll method by default.\r\n     *        Ignored if null or undefined.\r\n     * @param {newEdgeOffset} Optionally a new value for the edge offset, used by each scroll method by default. Ignored if null or undefined.\r\n     * @returns An object with the current values.\r\n     */\n\n\n    var setup = function setup(newDefaultDuration, newEdgeOffset) {\n      if (newDefaultDuration === 0 || newDefaultDuration) {\n        defaultDuration = newDefaultDuration;\n      }\n\n      if (newEdgeOffset === 0 || newEdgeOffset) {\n        edgeOffset = newEdgeOffset;\n      }\n\n      return {\n        defaultDuration: defaultDuration,\n        edgeOffset: edgeOffset\n      };\n    };\n\n    return {\n      setup: setup,\n      to: scrollToElem,\n      toY: scrollToY,\n      intoView: scrollIntoView,\n      center: scrollToCenterOf,\n      stop: stopScroll,\n      moving: function moving() {\n        return !!scrollTimeoutId;\n      },\n      getY: container.getY,\n      getTopOf: container.getTopOf\n    };\n  };\n\n  var docElem = document.documentElement;\n\n  var getDocY = function getDocY() {\n    return window.scrollY || docElem.scrollTop;\n  }; // Create a scroller for the document:\n\n\n  var zenscroll = makeScroller({\n    body: document.scrollingElement || document.body,\n    toY: function toY(y) {\n      window.scrollTo(0, y);\n    },\n    getY: getDocY,\n    getHeight: function getHeight() {\n      return window.innerHeight || docElem.clientHeight;\n    },\n    getTopOf: function getTopOf(elem) {\n      return elem.getBoundingClientRect().top + getDocY() - docElem.offsetTop;\n    }\n  });\n  /**\r\n   * Creates a scroller from the provided container element (e.g., a DIV)\r\n   *\r\n   * @param {scrollContainer} The vertical position within the document.\r\n   * @param {defaultDuration} Optionally a value for default duration, used for each scroll method by default.\r\n   *        Ignored if 0 or null or undefined.\r\n   * @param {edgeOffset} Optionally a value for the edge offset, used by each scroll method by default.\r\n   *        Ignored if null or undefined.\r\n   * @returns A scroller object, similar to `zenscroll` but controlling the provided element.\r\n   */\n\n  zenscroll.createScroller = function (scrollContainer, defaultDuration, edgeOffset) {\n    return makeScroller({\n      body: scrollContainer,\n      toY: function toY(y) {\n        scrollContainer.scrollTop = y;\n      },\n      getY: function getY() {\n        return scrollContainer.scrollTop;\n      },\n      getHeight: function getHeight() {\n        return Math.min(scrollContainer.clientHeight, window.innerHeight || docElem.clientHeight);\n      },\n      getTopOf: function getTopOf(elem) {\n        return elem.offsetTop;\n      }\n    }, defaultDuration, edgeOffset);\n  };\n\n  return zenscroll;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/vendor/zenscroll.js\n");

/***/ }),

/***/ "./node_modules/iframe-resizer/js/iframeResizer.js":
/*!*********************************************************!*\
  !*** ./node_modules/iframe-resizer/js/iframeResizer.js ***!
  \*********************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * File: iframeResizer.js\n * Desc: Force iframes to size to content.\n * Requires: iframeResizer.contentWindow.js to be loaded into the target frame.\n * Doc: https://github.com/davidjbradshaw/iframe-resizer\n * Author: David J. Bradshaw - dave@bradshaw.net\n * Contributor: Jure Mav - jure.mav@gmail.com\n * Contributor: Reed Dadoune - reed@dadoune.com\n */\n\n// eslint-disable-next-line sonarjs/cognitive-complexity, no-shadow-restricted-names\n;(function (undefined) {\n  if (typeof window === 'undefined') return // don't run for server side render\n\n  var count = 0,\n    logEnabled = false,\n    hiddenCheckEnabled = false,\n    msgHeader = 'message',\n    msgHeaderLen = msgHeader.length,\n    msgId = '[iFrameSizer]', // Must match iframe msg ID\n    msgIdLen = msgId.length,\n    pagePosition = null,\n    requestAnimationFrame = window.requestAnimationFrame,\n    resetRequiredMethods = {\n      max: 1,\n      scroll: 1,\n      bodyScroll: 1,\n      documentElementScroll: 1\n    },\n    settings = {},\n    timer = null,\n    defaults = {\n      autoResize: true,\n      bodyBackground: null,\n      bodyMargin: null,\n      bodyMarginV1: 8,\n      bodyPadding: null,\n      checkOrigin: true,\n      inPageLinks: false,\n      enablePublicMethods: true,\n      heightCalculationMethod: 'bodyOffset',\n      id: 'iFrameResizer',\n      interval: 32,\n      log: false,\n      maxHeight: Infinity,\n      maxWidth: Infinity,\n      minHeight: 0,\n      minWidth: 0,\n      mouseEvents: true,\n      resizeFrom: 'parent',\n      scrolling: false,\n      sizeHeight: true,\n      sizeWidth: false,\n      warningTimeout: 5000,\n      tolerance: 0,\n      widthCalculationMethod: 'scroll',\n      onClose: function () {\n        return true\n      },\n      onClosed: function () {},\n      onInit: function () {},\n      onMessage: function () {\n        warn('onMessage function not defined')\n      },\n      onMouseEnter: function () {},\n      onMouseLeave: function () {},\n      onResized: function () {},\n      onScroll: function () {\n        return true\n      }\n    }\n\n  function getMutationObserver() {\n    return (\n      window.MutationObserver ||\n      window.WebKitMutationObserver ||\n      window.MozMutationObserver\n    )\n  }\n\n  function addEventListener(el, evt, func) {\n    el.addEventListener(evt, func, false)\n  }\n\n  function removeEventListener(el, evt, func) {\n    el.removeEventListener(evt, func, false)\n  }\n\n  function setupRequestAnimationFrame() {\n    var vendors = ['moz', 'webkit', 'o', 'ms']\n    var x\n\n    // Remove vendor prefixing if prefixed and break early if not\n    for (x = 0; x < vendors.length && !requestAnimationFrame; x += 1) {\n      requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame']\n    }\n\n    if (!requestAnimationFrame) {\n      log('setup', 'RequestAnimationFrame not supported')\n    } else {\n      // Firefox extension content-scripts have a globalThis object that is not the same as window.\n      // Binding `requestAnimationFrame` to window allows the function to work and prevents errors\n      // being thrown when run in that context, and should be a no-op in every other context.\n      requestAnimationFrame = requestAnimationFrame.bind(window)\n    }\n  }\n\n  function getMyID(iframeId) {\n    var retStr = 'Host page: ' + iframeId\n\n    if (window.top !== window.self) {\n      retStr =\n        window.parentIFrame && window.parentIFrame.getId\n          ? window.parentIFrame.getId() + ': ' + iframeId\n          : 'Nested host page: ' + iframeId\n    }\n\n    return retStr\n  }\n\n  function formatLogHeader(iframeId) {\n    return msgId + '[' + getMyID(iframeId) + ']'\n  }\n\n  function isLogEnabled(iframeId) {\n    return settings[iframeId] ? settings[iframeId].log : logEnabled\n  }\n\n  function log(iframeId, msg) {\n    output('log', iframeId, msg, isLogEnabled(iframeId))\n  }\n\n  function info(iframeId, msg) {\n    output('info', iframeId, msg, isLogEnabled(iframeId))\n  }\n\n  function warn(iframeId, msg) {\n    output('warn', iframeId, msg, true)\n  }\n\n  function output(type, iframeId, msg, enabled) {\n    if (true === enabled && 'object' === typeof window.console) {\n      // eslint-disable-next-line no-console\n      console[type](formatLogHeader(iframeId), msg)\n    }\n  }\n\n  function iFrameListener(event) {\n    function resizeIFrame() {\n      function resize() {\n        setSize(messageData)\n        setPagePosition(iframeId)\n        on('onResized', messageData)\n      }\n\n      ensureInRange('Height')\n      ensureInRange('Width')\n\n      syncResize(resize, messageData, 'init')\n    }\n\n    function processMsg() {\n      var data = msg.substr(msgIdLen).split(':')\n      var height = data[1] ? parseInt(data[1], 10) : 0\n      var iframe = settings[data[0]] && settings[data[0]].iframe\n      var compStyle = getComputedStyle(iframe)\n\n      return {\n        iframe: iframe,\n        id: data[0],\n        height: height + getPaddingEnds(compStyle) + getBorderEnds(compStyle),\n        width: data[2],\n        type: data[3]\n      }\n    }\n\n    function getPaddingEnds(compStyle) {\n      if (compStyle.boxSizing !== 'border-box') {\n        return 0\n      }\n      var top = compStyle.paddingTop ? parseInt(compStyle.paddingTop, 10) : 0\n      var bot = compStyle.paddingBottom\n        ? parseInt(compStyle.paddingBottom, 10)\n        : 0\n      return top + bot\n    }\n\n    function getBorderEnds(compStyle) {\n      if (compStyle.boxSizing !== 'border-box') {\n        return 0\n      }\n      var top = compStyle.borderTopWidth\n        ? parseInt(compStyle.borderTopWidth, 10)\n        : 0\n      var bot = compStyle.borderBottomWidth\n        ? parseInt(compStyle.borderBottomWidth, 10)\n        : 0\n      return top + bot\n    }\n\n    function ensureInRange(Dimension) {\n      var max = Number(settings[iframeId]['max' + Dimension]),\n        min = Number(settings[iframeId]['min' + Dimension]),\n        dimension = Dimension.toLowerCase(),\n        size = Number(messageData[dimension])\n\n      log(iframeId, 'Checking ' + dimension + ' is in range ' + min + '-' + max)\n\n      if (size < min) {\n        size = min\n        log(iframeId, 'Set ' + dimension + ' to min value')\n      }\n\n      if (size > max) {\n        size = max\n        log(iframeId, 'Set ' + dimension + ' to max value')\n      }\n\n      messageData[dimension] = '' + size\n    }\n\n    function isMessageFromIFrame() {\n      function checkAllowedOrigin() {\n        function checkList() {\n          var i = 0,\n            retCode = false\n\n          log(\n            iframeId,\n            'Checking connection is from allowed list of origins: ' +\n              checkOrigin\n          )\n\n          for (; i < checkOrigin.length; i++) {\n            if (checkOrigin[i] === origin) {\n              retCode = true\n              break\n            }\n          }\n          return retCode\n        }\n\n        function checkSingle() {\n          var remoteHost = settings[iframeId] && settings[iframeId].remoteHost\n          log(iframeId, 'Checking connection is from: ' + remoteHost)\n          return origin === remoteHost\n        }\n\n        return checkOrigin.constructor === Array ? checkList() : checkSingle()\n      }\n\n      var origin = event.origin,\n        checkOrigin = settings[iframeId] && settings[iframeId].checkOrigin\n\n      if (checkOrigin && '' + origin !== 'null' && !checkAllowedOrigin()) {\n        throw new Error(\n          'Unexpected message received from: ' +\n            origin +\n            ' for ' +\n            messageData.iframe.id +\n            '. Message was: ' +\n            event.data +\n            '. This error can be disabled by setting the checkOrigin: false option or by providing of array of trusted domains.'\n        )\n      }\n\n      return true\n    }\n\n    function isMessageForUs() {\n      return (\n        msgId === ('' + msg).substr(0, msgIdLen) &&\n        msg.substr(msgIdLen).split(':')[0] in settings\n      ) // ''+Protects against non-string msg\n    }\n\n    function isMessageFromMetaParent() {\n      // Test if this message is from a parent above us. This is an ugly test, however, updating\n      // the message format would break backwards compatibity.\n      var retCode = messageData.type in { true: 1, false: 1, undefined: 1 }\n\n      if (retCode) {\n        log(iframeId, 'Ignoring init message from meta parent page')\n      }\n\n      return retCode\n    }\n\n    function getMsgBody(offset) {\n      return msg.substr(msg.indexOf(':') + msgHeaderLen + offset)\n    }\n\n    function forwardMsgFromIFrame(msgBody) {\n      log(\n        iframeId,\n        'onMessage passed: {iframe: ' +\n          messageData.iframe.id +\n          ', message: ' +\n          msgBody +\n          '}'\n      )\n\n      on('onMessage', {\n        iframe: messageData.iframe,\n        message: JSON.parse(msgBody)\n      })\n\n      log(iframeId, '--')\n    }\n\n    function getPageInfo() {\n      var bodyPosition = document.body.getBoundingClientRect(),\n        iFramePosition = messageData.iframe.getBoundingClientRect()\n\n      return JSON.stringify({\n        iframeHeight: iFramePosition.height,\n        iframeWidth: iFramePosition.width,\n        clientHeight: Math.max(\n          document.documentElement.clientHeight,\n          window.innerHeight || 0\n        ),\n        clientWidth: Math.max(\n          document.documentElement.clientWidth,\n          window.innerWidth || 0\n        ),\n        offsetTop: parseInt(iFramePosition.top - bodyPosition.top, 10),\n        offsetLeft: parseInt(iFramePosition.left - bodyPosition.left, 10),\n        scrollTop: window.pageYOffset,\n        scrollLeft: window.pageXOffset,\n        documentHeight: document.documentElement.clientHeight,\n        documentWidth: document.documentElement.clientWidth,\n        windowHeight: window.innerHeight,\n        windowWidth: window.innerWidth\n      })\n    }\n\n    function sendPageInfoToIframe(iframe, iframeId) {\n      function debouncedTrigger() {\n        trigger('Send Page Info', 'pageInfo:' + getPageInfo(), iframe, iframeId)\n      }\n      debounceFrameEvents(debouncedTrigger, 32, iframeId)\n    }\n\n    function startPageInfoMonitor() {\n      function setListener(type, func) {\n        function sendPageInfo() {\n          if (settings[id]) {\n            sendPageInfoToIframe(settings[id].iframe, id)\n          } else {\n            stop()\n          }\n        }\n\n        ;['scroll', 'resize'].forEach(function (evt) {\n          log(id, type + evt + ' listener for sendPageInfo')\n          func(window, evt, sendPageInfo)\n        })\n      }\n\n      function stop() {\n        setListener('Remove ', removeEventListener)\n      }\n\n      function start() {\n        setListener('Add ', addEventListener)\n      }\n\n      var id = iframeId // Create locally scoped copy of iFrame ID\n\n      start()\n\n      if (settings[id]) {\n        settings[id].stopPageInfo = stop\n      }\n    }\n\n    function stopPageInfoMonitor() {\n      if (settings[iframeId] && settings[iframeId].stopPageInfo) {\n        settings[iframeId].stopPageInfo()\n        delete settings[iframeId].stopPageInfo\n      }\n    }\n\n    function checkIFrameExists() {\n      var retBool = true\n\n      if (null === messageData.iframe) {\n        warn(iframeId, 'IFrame (' + messageData.id + ') not found')\n        retBool = false\n      }\n      return retBool\n    }\n\n    function getElementPosition(target) {\n      var iFramePosition = target.getBoundingClientRect()\n\n      getPagePosition(iframeId)\n\n      return {\n        x: Math.floor(Number(iFramePosition.left) + Number(pagePosition.x)),\n        y: Math.floor(Number(iFramePosition.top) + Number(pagePosition.y))\n      }\n    }\n\n    function scrollRequestFromChild(addOffset) {\n      /* istanbul ignore next */ // Not testable in Karma\n      function reposition() {\n        pagePosition = newPosition\n        scrollTo()\n        log(iframeId, '--')\n      }\n\n      function calcOffset() {\n        return {\n          x: Number(messageData.width) + offset.x,\n          y: Number(messageData.height) + offset.y\n        }\n      }\n\n      function scrollParent() {\n        if (window.parentIFrame) {\n          window.parentIFrame['scrollTo' + (addOffset ? 'Offset' : '')](\n            newPosition.x,\n            newPosition.y\n          )\n        } else {\n          warn(\n            iframeId,\n            'Unable to scroll to requested position, window.parentIFrame not found'\n          )\n        }\n      }\n\n      var offset = addOffset\n          ? getElementPosition(messageData.iframe)\n          : { x: 0, y: 0 },\n        newPosition = calcOffset()\n\n      log(\n        iframeId,\n        'Reposition requested from iFrame (offset x:' +\n          offset.x +\n          ' y:' +\n          offset.y +\n          ')'\n      )\n\n      if (window.top !== window.self) {\n        scrollParent()\n      } else {\n        reposition()\n      }\n    }\n\n    function scrollTo() {\n      if (false !== on('onScroll', pagePosition)) {\n        setPagePosition(iframeId)\n      } else {\n        unsetPagePosition()\n      }\n    }\n\n    function findTarget(location) {\n      function jumpToTarget() {\n        var jumpPosition = getElementPosition(target)\n\n        log(\n          iframeId,\n          'Moving to in page link (#' +\n            hash +\n            ') at x: ' +\n            jumpPosition.x +\n            ' y: ' +\n            jumpPosition.y\n        )\n        pagePosition = {\n          x: jumpPosition.x,\n          y: jumpPosition.y\n        }\n\n        scrollTo()\n        log(iframeId, '--')\n      }\n\n      function jumpToParent() {\n        if (window.parentIFrame) {\n          window.parentIFrame.moveToAnchor(hash)\n        } else {\n          log(\n            iframeId,\n            'In page link #' +\n              hash +\n              ' not found and window.parentIFrame not found'\n          )\n        }\n      }\n\n      var hash = location.split('#')[1] || '',\n        hashData = decodeURIComponent(hash),\n        target =\n          document.getElementById(hashData) ||\n          document.getElementsByName(hashData)[0]\n\n      if (target) {\n        jumpToTarget()\n      } else if (window.top !== window.self) {\n        jumpToParent()\n      } else {\n        log(iframeId, 'In page link #' + hash + ' not found')\n      }\n    }\n\n    function onMouse(event) {\n      var mousePos = {}\n\n      if (Number(messageData.width) === 0 && Number(messageData.height) === 0) {\n        var data = getMsgBody(9).split(':')\n        mousePos = {\n          x: data[1],\n          y: data[0]\n        }\n      } else {\n        mousePos = {\n          x: messageData.width,\n          y: messageData.height\n        }\n      }\n\n      on(event, {\n        iframe: messageData.iframe,\n        screenX: Number(mousePos.x),\n        screenY: Number(mousePos.y),\n        type: messageData.type\n      })\n    }\n\n    function on(funcName, val) {\n      return chkEvent(iframeId, funcName, val)\n    }\n\n    function actionMsg() {\n      if (settings[iframeId] && settings[iframeId].firstRun) firstRun()\n\n      switch (messageData.type) {\n        case 'close':\n          closeIFrame(messageData.iframe)\n          break\n\n        case 'message':\n          forwardMsgFromIFrame(getMsgBody(6))\n          break\n\n        case 'mouseenter':\n          onMouse('onMouseEnter')\n          break\n\n        case 'mouseleave':\n          onMouse('onMouseLeave')\n          break\n\n        case 'autoResize':\n          settings[iframeId].autoResize = JSON.parse(getMsgBody(9))\n          break\n\n        case 'scrollTo':\n          scrollRequestFromChild(false)\n          break\n\n        case 'scrollToOffset':\n          scrollRequestFromChild(true)\n          break\n\n        case 'pageInfo':\n          sendPageInfoToIframe(\n            settings[iframeId] && settings[iframeId].iframe,\n            iframeId\n          )\n          startPageInfoMonitor()\n          break\n\n        case 'pageInfoStop':\n          stopPageInfoMonitor()\n          break\n\n        case 'inPageLink':\n          findTarget(getMsgBody(9))\n          break\n\n        case 'reset':\n          resetIFrame(messageData)\n          break\n\n        case 'init':\n          resizeIFrame()\n          on('onInit', messageData.iframe)\n          break\n\n        default:\n          if (\n            Number(messageData.width) === 0 &&\n            Number(messageData.height) === 0\n          ) {\n            warn(\n              'Unsupported message received (' +\n                messageData.type +\n                '), this is likely due to the iframe containing a later ' +\n                'version of iframe-resizer than the parent page'\n            )\n          } else {\n            resizeIFrame()\n          }\n      }\n    }\n\n    function hasSettings(iframeId) {\n      var retBool = true\n\n      if (!settings[iframeId]) {\n        retBool = false\n        warn(\n          messageData.type +\n            ' No settings for ' +\n            iframeId +\n            '. Message was: ' +\n            msg\n        )\n      }\n\n      return retBool\n    }\n\n    function iFrameReadyMsgReceived() {\n      // eslint-disable-next-line no-restricted-syntax, guard-for-in\n      for (var iframeId in settings) {\n        trigger(\n          'iFrame requested init',\n          createOutgoingMsg(iframeId),\n          settings[iframeId].iframe,\n          iframeId\n        )\n      }\n    }\n\n    function firstRun() {\n      if (settings[iframeId]) {\n        settings[iframeId].firstRun = false\n      }\n    }\n\n    var msg = event.data,\n      messageData = {},\n      iframeId = null\n\n    if ('[iFrameResizerChild]Ready' === msg) {\n      iFrameReadyMsgReceived()\n    } else if (isMessageForUs()) {\n      messageData = processMsg()\n      iframeId = messageData.id\n      if (settings[iframeId]) {\n        settings[iframeId].loaded = true\n      }\n\n      if (!isMessageFromMetaParent() && hasSettings(iframeId)) {\n        log(iframeId, 'Received: ' + msg)\n\n        if (checkIFrameExists() && isMessageFromIFrame()) {\n          actionMsg()\n        }\n      }\n    } else {\n      info(iframeId, 'Ignored: ' + msg)\n    }\n  }\n\n  function chkEvent(iframeId, funcName, val) {\n    var func = null,\n      retVal = null\n\n    if (settings[iframeId]) {\n      func = settings[iframeId][funcName]\n\n      if ('function' === typeof func) {\n        retVal = func(val)\n      } else {\n        throw new TypeError(\n          funcName + ' on iFrame[' + iframeId + '] is not a function'\n        )\n      }\n    }\n\n    return retVal\n  }\n\n  function removeIframeListeners(iframe) {\n    var iframeId = iframe.id\n    delete settings[iframeId]\n  }\n\n  function closeIFrame(iframe) {\n    var iframeId = iframe.id\n    if (chkEvent(iframeId, 'onClose', iframeId) === false) {\n      log(iframeId, 'Close iframe cancelled by onClose event')\n      return\n    }\n    log(iframeId, 'Removing iFrame: ' + iframeId)\n\n    try {\n      // Catch race condition error with React\n      if (iframe.parentNode) {\n        iframe.parentNode.removeChild(iframe)\n      }\n    } catch (error) {\n      warn(error)\n    }\n\n    chkEvent(iframeId, 'onClosed', iframeId)\n    log(iframeId, '--')\n    removeIframeListeners(iframe)\n  }\n\n  function getPagePosition(iframeId) {\n    if (null === pagePosition) {\n      pagePosition = {\n        x:\n          window.pageXOffset !== undefined\n            ? window.pageXOffset\n            : document.documentElement.scrollLeft,\n        y:\n          window.pageYOffset !== undefined\n            ? window.pageYOffset\n            : document.documentElement.scrollTop\n      }\n      log(\n        iframeId,\n        'Get page position: ' + pagePosition.x + ',' + pagePosition.y\n      )\n    }\n  }\n\n  function setPagePosition(iframeId) {\n    if (null !== pagePosition) {\n      window.scrollTo(pagePosition.x, pagePosition.y)\n      log(\n        iframeId,\n        'Set page position: ' + pagePosition.x + ',' + pagePosition.y\n      )\n      unsetPagePosition()\n    }\n  }\n\n  function unsetPagePosition() {\n    pagePosition = null\n  }\n\n  function resetIFrame(messageData) {\n    function reset() {\n      setSize(messageData)\n      trigger('reset', 'reset', messageData.iframe, messageData.id)\n    }\n\n    log(\n      messageData.id,\n      'Size reset requested by ' +\n        ('init' === messageData.type ? 'host page' : 'iFrame')\n    )\n    getPagePosition(messageData.id)\n    syncResize(reset, messageData, 'reset')\n  }\n\n  function setSize(messageData) {\n    function setDimension(dimension) {\n      if (!messageData.id) {\n        log('undefined', 'messageData id not set')\n        return\n      }\n      messageData.iframe.style[dimension] = messageData[dimension] + 'px'\n      log(\n        messageData.id,\n        'IFrame (' +\n          iframeId +\n          ') ' +\n          dimension +\n          ' set to ' +\n          messageData[dimension] +\n          'px'\n      )\n    }\n\n    function chkZero(dimension) {\n      // FireFox sets dimension of hidden iFrames to zero.\n      // So if we detect that set up an event to check for\n      // when iFrame becomes visible.\n\n      /* istanbul ignore next */ // Not testable in PhantomJS\n      if (!hiddenCheckEnabled && '0' === messageData[dimension]) {\n        hiddenCheckEnabled = true\n        log(iframeId, 'Hidden iFrame detected, creating visibility listener')\n        fixHiddenIFrames()\n      }\n    }\n\n    function processDimension(dimension) {\n      setDimension(dimension)\n      chkZero(dimension)\n    }\n\n    var iframeId = messageData.iframe.id\n\n    if (settings[iframeId]) {\n      if (settings[iframeId].sizeHeight) {\n        processDimension('height')\n      }\n      if (settings[iframeId].sizeWidth) {\n        processDimension('width')\n      }\n    }\n  }\n\n  function syncResize(func, messageData, doNotSync) {\n    /* istanbul ignore if */ // Not testable in PhantomJS\n    if (\n      doNotSync !== messageData.type &&\n      requestAnimationFrame &&\n      // including check for jasmine because had trouble getting spy to work in unit test using requestAnimationFrame\n      !window.jasmine\n    ) {\n      log(messageData.id, 'Requesting animation frame')\n      requestAnimationFrame(func)\n    } else {\n      func()\n    }\n  }\n\n  function trigger(calleeMsg, msg, iframe, id, noResponseWarning) {\n    function postMessageToIFrame() {\n      var target = settings[id] && settings[id].targetOrigin\n      log(\n        id,\n        '[' +\n          calleeMsg +\n          '] Sending msg to iframe[' +\n          id +\n          '] (' +\n          msg +\n          ') targetOrigin: ' +\n          target\n      )\n      iframe.contentWindow.postMessage(msgId + msg, target)\n    }\n\n    function iFrameNotFound() {\n      warn(id, '[' + calleeMsg + '] IFrame(' + id + ') not found')\n    }\n\n    function chkAndSend() {\n      if (\n        iframe &&\n        'contentWindow' in iframe &&\n        null !== iframe.contentWindow\n      ) {\n        // Null test for PhantomJS\n        postMessageToIFrame()\n      } else {\n        iFrameNotFound()\n      }\n    }\n\n    function warnOnNoResponse() {\n      function warning() {\n        if (settings[id] && !settings[id].loaded && !errorShown) {\n          errorShown = true\n          warn(\n            id,\n            'IFrame has not responded within ' +\n              settings[id].warningTimeout / 1000 +\n              ' seconds. Check iFrameResizer.contentWindow.js has been loaded in iFrame. This message can be ignored if everything is working, or you can set the warningTimeout option to a higher value or zero to suppress this warning.'\n          )\n        }\n      }\n\n      if (\n        !!noResponseWarning &&\n        settings[id] &&\n        !!settings[id].warningTimeout\n      ) {\n        settings[id].msgTimeout = setTimeout(\n          warning,\n          settings[id].warningTimeout\n        )\n      }\n    }\n\n    var errorShown = false\n\n    id = id || iframe.id\n\n    if (settings[id]) {\n      chkAndSend()\n      warnOnNoResponse()\n    }\n  }\n\n  function createOutgoingMsg(iframeId) {\n    return (\n      iframeId +\n      ':' +\n      settings[iframeId].bodyMarginV1 +\n      ':' +\n      settings[iframeId].sizeWidth +\n      ':' +\n      settings[iframeId].log +\n      ':' +\n      settings[iframeId].interval +\n      ':' +\n      settings[iframeId].enablePublicMethods +\n      ':' +\n      settings[iframeId].autoResize +\n      ':' +\n      settings[iframeId].bodyMargin +\n      ':' +\n      settings[iframeId].heightCalculationMethod +\n      ':' +\n      settings[iframeId].bodyBackground +\n      ':' +\n      settings[iframeId].bodyPadding +\n      ':' +\n      settings[iframeId].tolerance +\n      ':' +\n      settings[iframeId].inPageLinks +\n      ':' +\n      settings[iframeId].resizeFrom +\n      ':' +\n      settings[iframeId].widthCalculationMethod +\n      ':' +\n      settings[iframeId].mouseEvents\n    )\n  }\n\n  function isNumber(value) {\n    return typeof value === 'number'\n  }\n\n  function setupIFrame(iframe, options) {\n    function setLimits() {\n      function addStyle(style) {\n        var styleValue = settings[iframeId][style]\n        if (Infinity !== styleValue && 0 !== styleValue) {\n          iframe.style[style] = isNumber(styleValue)\n            ? styleValue + 'px'\n            : styleValue\n          log(iframeId, 'Set ' + style + ' = ' + iframe.style[style])\n        }\n      }\n\n      function chkMinMax(dimension) {\n        if (\n          settings[iframeId]['min' + dimension] >\n          settings[iframeId]['max' + dimension]\n        ) {\n          throw new Error(\n            'Value for min' +\n              dimension +\n              ' can not be greater than max' +\n              dimension\n          )\n        }\n      }\n\n      chkMinMax('Height')\n      chkMinMax('Width')\n\n      addStyle('maxHeight')\n      addStyle('minHeight')\n      addStyle('maxWidth')\n      addStyle('minWidth')\n    }\n\n    function newId() {\n      var id = (options && options.id) || defaults.id + count++\n      if (null !== document.getElementById(id)) {\n        id += count++\n      }\n      return id\n    }\n\n    function ensureHasId(iframeId) {\n      if ('' === iframeId) {\n        // eslint-disable-next-line no-multi-assign\n        iframe.id = iframeId = newId()\n        logEnabled = (options || {}).log\n        log(\n          iframeId,\n          'Added missing iframe ID: ' + iframeId + ' (' + iframe.src + ')'\n        )\n      }\n\n      return iframeId\n    }\n\n    function setScrolling() {\n      log(\n        iframeId,\n        'IFrame scrolling ' +\n          (settings[iframeId] && settings[iframeId].scrolling\n            ? 'enabled'\n            : 'disabled') +\n          ' for ' +\n          iframeId\n      )\n      iframe.style.overflow =\n        false === (settings[iframeId] && settings[iframeId].scrolling)\n          ? 'hidden'\n          : 'auto'\n      switch (settings[iframeId] && settings[iframeId].scrolling) {\n        case 'omit':\n          break\n\n        case true:\n          iframe.scrolling = 'yes'\n          break\n\n        case false:\n          iframe.scrolling = 'no'\n          break\n\n        default:\n          iframe.scrolling = settings[iframeId]\n            ? settings[iframeId].scrolling\n            : 'no'\n      }\n    }\n\n    // The V1 iFrame script expects an int, where as in V2 expects a CSS\n    // string value such as '1px 3em', so if we have an int for V2, set V1=V2\n    // and then convert V2 to a string PX value.\n    function setupBodyMarginValues() {\n      if (\n        'number' ===\n          typeof (settings[iframeId] && settings[iframeId].bodyMargin) ||\n        '0' === (settings[iframeId] && settings[iframeId].bodyMargin)\n      ) {\n        settings[iframeId].bodyMarginV1 = settings[iframeId].bodyMargin\n        settings[iframeId].bodyMargin =\n          '' + settings[iframeId].bodyMargin + 'px'\n      }\n    }\n\n    function checkReset() {\n      // Reduce scope of firstRun to function, because IE8's JS execution\n      // context stack is borked and this value gets externally\n      // changed midway through running this function!!!\n      var firstRun = settings[iframeId] && settings[iframeId].firstRun,\n        resetRequertMethod =\n          settings[iframeId] &&\n          settings[iframeId].heightCalculationMethod in resetRequiredMethods\n\n      if (!firstRun && resetRequertMethod) {\n        resetIFrame({ iframe: iframe, height: 0, width: 0, type: 'init' })\n      }\n    }\n\n    function setupIFrameObject() {\n      if (settings[iframeId]) {\n        settings[iframeId].iframe.iFrameResizer = {\n          close: closeIFrame.bind(null, settings[iframeId].iframe),\n\n          removeListeners: removeIframeListeners.bind(\n            null,\n            settings[iframeId].iframe\n          ),\n\n          resize: trigger.bind(\n            null,\n            'Window resize',\n            'resize',\n            settings[iframeId].iframe\n          ),\n\n          moveToAnchor: function (anchor) {\n            trigger(\n              'Move to anchor',\n              'moveToAnchor:' + anchor,\n              settings[iframeId].iframe,\n              iframeId\n            )\n          },\n\n          sendMessage: function (message) {\n            message = JSON.stringify(message)\n            trigger(\n              'Send Message',\n              'message:' + message,\n              settings[iframeId].iframe,\n              iframeId\n            )\n          }\n        }\n      }\n    }\n\n    // We have to call trigger twice, as we can not be sure if all\n    // iframes have completed loading when this code runs. The\n    // event listener also catches the page changing in the iFrame.\n    function init(msg) {\n      function iFrameLoaded() {\n        trigger('iFrame.onload', msg, iframe, undefined, true)\n        checkReset()\n      }\n\n      function createDestroyObserver(MutationObserver) {\n        if (!iframe.parentNode) {\n          return\n        }\n\n        var destroyObserver = new MutationObserver(function (mutations) {\n          mutations.forEach(function (mutation) {\n            var removedNodes = Array.prototype.slice.call(mutation.removedNodes) // Transform NodeList into an Array\n            removedNodes.forEach(function (removedNode) {\n              if (removedNode === iframe) {\n                closeIFrame(iframe)\n              }\n            })\n          })\n        })\n        destroyObserver.observe(iframe.parentNode, {\n          childList: true\n        })\n      }\n\n      var MutationObserver = getMutationObserver()\n      if (MutationObserver) {\n        createDestroyObserver(MutationObserver)\n      }\n\n      addEventListener(iframe, 'load', iFrameLoaded)\n      trigger('init', msg, iframe, undefined, true)\n    }\n\n    function checkOptions(options) {\n      if ('object' !== typeof options) {\n        throw new TypeError('Options is not an object')\n      }\n    }\n\n    function copyOptions(options) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (var option in defaults) {\n        if (Object.prototype.hasOwnProperty.call(defaults, option)) {\n          settings[iframeId][option] = Object.prototype.hasOwnProperty.call(\n            options,\n            option\n          )\n            ? options[option]\n            : defaults[option]\n        }\n      }\n    }\n\n    function getTargetOrigin(remoteHost) {\n      return '' === remoteHost ||\n        null !== remoteHost.match(/^(about:blank|javascript:|file:\\/\\/)/)\n        ? '*'\n        : remoteHost\n    }\n\n    function depricate(key) {\n      var splitName = key.split('Callback')\n\n      if (splitName.length === 2) {\n        var name =\n          'on' + splitName[0].charAt(0).toUpperCase() + splitName[0].slice(1)\n        this[name] = this[key]\n        delete this[key]\n        warn(\n          iframeId,\n          \"Deprecated: '\" +\n            key +\n            \"' has been renamed '\" +\n            name +\n            \"'. The old method will be removed in the next major version.\"\n        )\n      }\n    }\n\n    function processOptions(options) {\n      options = options || {}\n      settings[iframeId] = {\n        firstRun: true,\n        iframe: iframe,\n        remoteHost: iframe.src && iframe.src.split('/').slice(0, 3).join('/')\n      }\n\n      checkOptions(options)\n      Object.keys(options).forEach(depricate, options)\n      copyOptions(options)\n\n      if (settings[iframeId]) {\n        settings[iframeId].targetOrigin =\n          true === settings[iframeId].checkOrigin\n            ? getTargetOrigin(settings[iframeId].remoteHost)\n            : '*'\n      }\n    }\n\n    function beenHere() {\n      return iframeId in settings && 'iFrameResizer' in iframe\n    }\n\n    var iframeId = ensureHasId(iframe.id)\n\n    if (!beenHere()) {\n      processOptions(options)\n      setScrolling()\n      setLimits()\n      setupBodyMarginValues()\n      init(createOutgoingMsg(iframeId))\n      setupIFrameObject()\n    } else {\n      warn(iframeId, 'Ignored iFrame, already setup.')\n    }\n  }\n\n  function debouce(fn, time) {\n    if (null === timer) {\n      timer = setTimeout(function () {\n        timer = null\n        fn()\n      }, time)\n    }\n  }\n\n  var frameTimer = {}\n  function debounceFrameEvents(fn, time, frameId) {\n    if (!frameTimer[frameId]) {\n      frameTimer[frameId] = setTimeout(function () {\n        frameTimer[frameId] = null\n        fn()\n      }, time)\n    }\n  }\n\n  // Not testable in PhantomJS\n  /* istanbul ignore next */\n\n  function fixHiddenIFrames() {\n    function checkIFrames() {\n      function checkIFrame(settingId) {\n        function chkDimension(dimension) {\n          return (\n            '0px' ===\n            (settings[settingId] && settings[settingId].iframe.style[dimension])\n          )\n        }\n\n        function isVisible(el) {\n          return null !== el.offsetParent\n        }\n\n        if (\n          settings[settingId] &&\n          isVisible(settings[settingId].iframe) &&\n          (chkDimension('height') || chkDimension('width'))\n        ) {\n          trigger(\n            'Visibility change',\n            'resize',\n            settings[settingId].iframe,\n            settingId\n          )\n        }\n      }\n\n      Object.keys(settings).forEach(function (key) {\n        checkIFrame(key)\n      })\n    }\n\n    function mutationObserved(mutations) {\n      log(\n        'window',\n        'Mutation observed: ' + mutations[0].target + ' ' + mutations[0].type\n      )\n      debouce(checkIFrames, 16)\n    }\n\n    function createMutationObserver() {\n      var target = document.querySelector('body'),\n        config = {\n          attributes: true,\n          attributeOldValue: false,\n          characterData: true,\n          characterDataOldValue: false,\n          childList: true,\n          subtree: true\n        },\n        observer = new MutationObserver(mutationObserved)\n\n      observer.observe(target, config)\n    }\n\n    var MutationObserver = getMutationObserver()\n    if (MutationObserver) {\n      createMutationObserver()\n    }\n  }\n\n  function resizeIFrames(event) {\n    function resize() {\n      sendTriggerMsg('Window ' + event, 'resize')\n    }\n\n    log('window', 'Trigger event: ' + event)\n    debouce(resize, 16)\n  }\n\n  // Not testable in PhantomJS\n  /* istanbul ignore next */\n  function tabVisible() {\n    function resize() {\n      sendTriggerMsg('Tab Visable', 'resize')\n    }\n\n    if ('hidden' !== document.visibilityState) {\n      log('document', 'Trigger event: Visiblity change')\n      debouce(resize, 16)\n    }\n  }\n\n  function sendTriggerMsg(eventName, event) {\n    function isIFrameResizeEnabled(iframeId) {\n      return (\n        settings[iframeId] &&\n        'parent' === settings[iframeId].resizeFrom &&\n        settings[iframeId].autoResize &&\n        !settings[iframeId].firstRun\n      )\n    }\n\n    Object.keys(settings).forEach(function (iframeId) {\n      if (isIFrameResizeEnabled(iframeId)) {\n        trigger(eventName, event, settings[iframeId].iframe, iframeId)\n      }\n    })\n  }\n\n  function setupEventListeners() {\n    addEventListener(window, 'message', iFrameListener)\n\n    addEventListener(window, 'resize', function () {\n      resizeIFrames('resize')\n    })\n\n    addEventListener(document, 'visibilitychange', tabVisible)\n\n    addEventListener(document, '-webkit-visibilitychange', tabVisible)\n  }\n\n  function factory() {\n    function init(options, element) {\n      function chkType() {\n        if (!element.tagName) {\n          throw new TypeError('Object is not a valid DOM element')\n        } else if ('IFRAME' !== element.tagName.toUpperCase()) {\n          throw new TypeError(\n            'Expected <IFRAME> tag, found <' + element.tagName + '>'\n          )\n        }\n      }\n\n      if (element) {\n        chkType()\n        setupIFrame(element, options)\n        iFrames.push(element)\n      }\n    }\n\n    function warnDeprecatedOptions(options) {\n      if (options && options.enablePublicMethods) {\n        warn(\n          'enablePublicMethods option has been removed, public methods are now always available in the iFrame'\n        )\n      }\n    }\n\n    var iFrames\n\n    setupRequestAnimationFrame()\n    setupEventListeners()\n\n    return function iFrameResizeF(options, target) {\n      iFrames = [] // Only return iFrames past in on this call\n\n      warnDeprecatedOptions(options)\n\n      switch (typeof target) {\n        case 'undefined':\n        case 'string':\n          Array.prototype.forEach.call(\n            document.querySelectorAll(target || 'iframe'),\n            init.bind(undefined, options)\n          )\n          break\n\n        case 'object':\n          init(options, target)\n          break\n\n        default:\n          throw new TypeError('Unexpected data type (' + typeof target + ')')\n      }\n\n      return iFrames\n    }\n  }\n\n  function createJQueryPublicMethod($) {\n    if (!$.fn) {\n      info('', 'Unable to bind to jQuery, it is not fully loaded.')\n    } else if (!$.fn.iFrameResize) {\n      $.fn.iFrameResize = function $iFrameResizeF(options) {\n        function init(index, element) {\n          setupIFrame(element, options)\n        }\n\n        return this.filter('iframe').each(init).end()\n      }\n    }\n  }\n\n  if (window.jQuery) {\n    createJQueryPublicMethod(window.jQuery)\n  }\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n  window.iFrameResize = window.iFrameResize || factory()\n})()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWZyYW1lLXJlc2l6ZXIvanMvaWZyYW1lUmVzaXplci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsOEJBQThCO0FBQzlCLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0EsT0FBTztBQUNQLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFDbEMsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLDhDQUE4QztBQUM5RDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsd0JBQXdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMENBQTBDOztBQUUxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsbURBQW1EO0FBQ3pFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLElBQTBDO0FBQ2hELElBQUksaUNBQU8sRUFBRSxvQ0FBRSxPQUFPO0FBQUE7QUFBQTtBQUFBLGtHQUFDO0FBQ3ZCLElBQUksS0FBSyxFQUdOO0FBQ0g7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ29tbWVudHMvLi9ub2RlX21vZHVsZXMvaWZyYW1lLXJlc2l6ZXIvanMvaWZyYW1lUmVzaXplci5qcz8wMzYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBGaWxlOiBpZnJhbWVSZXNpemVyLmpzXG4gKiBEZXNjOiBGb3JjZSBpZnJhbWVzIHRvIHNpemUgdG8gY29udGVudC5cbiAqIFJlcXVpcmVzOiBpZnJhbWVSZXNpemVyLmNvbnRlbnRXaW5kb3cuanMgdG8gYmUgbG9hZGVkIGludG8gdGhlIHRhcmdldCBmcmFtZS5cbiAqIERvYzogaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkamJyYWRzaGF3L2lmcmFtZS1yZXNpemVyXG4gKiBBdXRob3I6IERhdmlkIEouIEJyYWRzaGF3IC0gZGF2ZUBicmFkc2hhdy5uZXRcbiAqIENvbnRyaWJ1dG9yOiBKdXJlIE1hdiAtIGp1cmUubWF2QGdtYWlsLmNvbVxuICogQ29udHJpYnV0b3I6IFJlZWQgRGFkb3VuZSAtIHJlZWRAZGFkb3VuZS5jb21cbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc29uYXJqcy9jb2duaXRpdmUtY29tcGxleGl0eSwgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbjsoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiAvLyBkb24ndCBydW4gZm9yIHNlcnZlciBzaWRlIHJlbmRlclxuXG4gIHZhciBjb3VudCA9IDAsXG4gICAgbG9nRW5hYmxlZCA9IGZhbHNlLFxuICAgIGhpZGRlbkNoZWNrRW5hYmxlZCA9IGZhbHNlLFxuICAgIG1zZ0hlYWRlciA9ICdtZXNzYWdlJyxcbiAgICBtc2dIZWFkZXJMZW4gPSBtc2dIZWFkZXIubGVuZ3RoLFxuICAgIG1zZ0lkID0gJ1tpRnJhbWVTaXplcl0nLCAvLyBNdXN0IG1hdGNoIGlmcmFtZSBtc2cgSURcbiAgICBtc2dJZExlbiA9IG1zZ0lkLmxlbmd0aCxcbiAgICBwYWdlUG9zaXRpb24gPSBudWxsLFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgcmVzZXRSZXF1aXJlZE1ldGhvZHMgPSB7XG4gICAgICBtYXg6IDEsXG4gICAgICBzY3JvbGw6IDEsXG4gICAgICBib2R5U2Nyb2xsOiAxLFxuICAgICAgZG9jdW1lbnRFbGVtZW50U2Nyb2xsOiAxXG4gICAgfSxcbiAgICBzZXR0aW5ncyA9IHt9LFxuICAgIHRpbWVyID0gbnVsbCxcbiAgICBkZWZhdWx0cyA9IHtcbiAgICAgIGF1dG9SZXNpemU6IHRydWUsXG4gICAgICBib2R5QmFja2dyb3VuZDogbnVsbCxcbiAgICAgIGJvZHlNYXJnaW46IG51bGwsXG4gICAgICBib2R5TWFyZ2luVjE6IDgsXG4gICAgICBib2R5UGFkZGluZzogbnVsbCxcbiAgICAgIGNoZWNrT3JpZ2luOiB0cnVlLFxuICAgICAgaW5QYWdlTGlua3M6IGZhbHNlLFxuICAgICAgZW5hYmxlUHVibGljTWV0aG9kczogdHJ1ZSxcbiAgICAgIGhlaWdodENhbGN1bGF0aW9uTWV0aG9kOiAnYm9keU9mZnNldCcsXG4gICAgICBpZDogJ2lGcmFtZVJlc2l6ZXInLFxuICAgICAgaW50ZXJ2YWw6IDMyLFxuICAgICAgbG9nOiBmYWxzZSxcbiAgICAgIG1heEhlaWdodDogSW5maW5pdHksXG4gICAgICBtYXhXaWR0aDogSW5maW5pdHksXG4gICAgICBtaW5IZWlnaHQ6IDAsXG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIG1vdXNlRXZlbnRzOiB0cnVlLFxuICAgICAgcmVzaXplRnJvbTogJ3BhcmVudCcsXG4gICAgICBzY3JvbGxpbmc6IGZhbHNlLFxuICAgICAgc2l6ZUhlaWdodDogdHJ1ZSxcbiAgICAgIHNpemVXaWR0aDogZmFsc2UsXG4gICAgICB3YXJuaW5nVGltZW91dDogNTAwMCxcbiAgICAgIHRvbGVyYW5jZTogMCxcbiAgICAgIHdpZHRoQ2FsY3VsYXRpb25NZXRob2Q6ICdzY3JvbGwnLFxuICAgICAgb25DbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSxcbiAgICAgIG9uQ2xvc2VkOiBmdW5jdGlvbiAoKSB7fSxcbiAgICAgIG9uSW5pdDogZnVuY3Rpb24gKCkge30sXG4gICAgICBvbk1lc3NhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2Fybignb25NZXNzYWdlIGZ1bmN0aW9uIG5vdCBkZWZpbmVkJylcbiAgICAgIH0sXG4gICAgICBvbk1vdXNlRW50ZXI6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICAgIG9uUmVzaXplZDogZnVuY3Rpb24gKCkge30sXG4gICAgICBvblNjcm9sbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICBmdW5jdGlvbiBnZXRNdXRhdGlvbk9ic2VydmVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fFxuICAgICAgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgfHxcbiAgICAgIHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbCwgZXZ0LCBmdW5jKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldnQsIGZ1bmMsIGZhbHNlKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZ0LCBmdW5jKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnQsIGZ1bmMsIGZhbHNlKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0dXBSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB7XG4gICAgdmFyIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnLCAnbycsICdtcyddXG4gICAgdmFyIHhcblxuICAgIC8vIFJlbW92ZSB2ZW5kb3IgcHJlZml4aW5nIGlmIHByZWZpeGVkIGFuZCBicmVhayBlYXJseSBpZiBub3RcbiAgICBmb3IgKHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXJlcXVlc3RBbmltYXRpb25GcmFtZTsgeCArPSAxKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICBsb2coJ3NldHVwJywgJ1JlcXVlc3RBbmltYXRpb25GcmFtZSBub3Qgc3VwcG9ydGVkJylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmlyZWZveCBleHRlbnNpb24gY29udGVudC1zY3JpcHRzIGhhdmUgYSBnbG9iYWxUaGlzIG9iamVjdCB0aGF0IGlzIG5vdCB0aGUgc2FtZSBhcyB3aW5kb3cuXG4gICAgICAvLyBCaW5kaW5nIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIHRvIHdpbmRvdyBhbGxvd3MgdGhlIGZ1bmN0aW9uIHRvIHdvcmsgYW5kIHByZXZlbnRzIGVycm9yc1xuICAgICAgLy8gYmVpbmcgdGhyb3duIHdoZW4gcnVuIGluIHRoYXQgY29udGV4dCwgYW5kIHNob3VsZCBiZSBhIG5vLW9wIGluIGV2ZXJ5IG90aGVyIGNvbnRleHQuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TXlJRChpZnJhbWVJZCkge1xuICAgIHZhciByZXRTdHIgPSAnSG9zdCBwYWdlOiAnICsgaWZyYW1lSWRcblxuICAgIGlmICh3aW5kb3cudG9wICE9PSB3aW5kb3cuc2VsZikge1xuICAgICAgcmV0U3RyID1cbiAgICAgICAgd2luZG93LnBhcmVudElGcmFtZSAmJiB3aW5kb3cucGFyZW50SUZyYW1lLmdldElkXG4gICAgICAgICAgPyB3aW5kb3cucGFyZW50SUZyYW1lLmdldElkKCkgKyAnOiAnICsgaWZyYW1lSWRcbiAgICAgICAgICA6ICdOZXN0ZWQgaG9zdCBwYWdlOiAnICsgaWZyYW1lSWRcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0U3RyXG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRMb2dIZWFkZXIoaWZyYW1lSWQpIHtcbiAgICByZXR1cm4gbXNnSWQgKyAnWycgKyBnZXRNeUlEKGlmcmFtZUlkKSArICddJ1xuICB9XG5cbiAgZnVuY3Rpb24gaXNMb2dFbmFibGVkKGlmcmFtZUlkKSB7XG4gICAgcmV0dXJuIHNldHRpbmdzW2lmcmFtZUlkXSA/IHNldHRpbmdzW2lmcmFtZUlkXS5sb2cgOiBsb2dFbmFibGVkXG4gIH1cblxuICBmdW5jdGlvbiBsb2coaWZyYW1lSWQsIG1zZykge1xuICAgIG91dHB1dCgnbG9nJywgaWZyYW1lSWQsIG1zZywgaXNMb2dFbmFibGVkKGlmcmFtZUlkKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGluZm8oaWZyYW1lSWQsIG1zZykge1xuICAgIG91dHB1dCgnaW5mbycsIGlmcmFtZUlkLCBtc2csIGlzTG9nRW5hYmxlZChpZnJhbWVJZCkpXG4gIH1cblxuICBmdW5jdGlvbiB3YXJuKGlmcmFtZUlkLCBtc2cpIHtcbiAgICBvdXRwdXQoJ3dhcm4nLCBpZnJhbWVJZCwgbXNnLCB0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gb3V0cHV0KHR5cGUsIGlmcmFtZUlkLCBtc2csIGVuYWJsZWQpIHtcbiAgICBpZiAodHJ1ZSA9PT0gZW5hYmxlZCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZVt0eXBlXShmb3JtYXRMb2dIZWFkZXIoaWZyYW1lSWQpLCBtc2cpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaUZyYW1lTGlzdGVuZXIoZXZlbnQpIHtcbiAgICBmdW5jdGlvbiByZXNpemVJRnJhbWUoKSB7XG4gICAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgIHNldFNpemUobWVzc2FnZURhdGEpXG4gICAgICAgIHNldFBhZ2VQb3NpdGlvbihpZnJhbWVJZClcbiAgICAgICAgb24oJ29uUmVzaXplZCcsIG1lc3NhZ2VEYXRhKVxuICAgICAgfVxuXG4gICAgICBlbnN1cmVJblJhbmdlKCdIZWlnaHQnKVxuICAgICAgZW5zdXJlSW5SYW5nZSgnV2lkdGgnKVxuXG4gICAgICBzeW5jUmVzaXplKHJlc2l6ZSwgbWVzc2FnZURhdGEsICdpbml0JylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzTXNnKCkge1xuICAgICAgdmFyIGRhdGEgPSBtc2cuc3Vic3RyKG1zZ0lkTGVuKS5zcGxpdCgnOicpXG4gICAgICB2YXIgaGVpZ2h0ID0gZGF0YVsxXSA/IHBhcnNlSW50KGRhdGFbMV0sIDEwKSA6IDBcbiAgICAgIHZhciBpZnJhbWUgPSBzZXR0aW5nc1tkYXRhWzBdXSAmJiBzZXR0aW5nc1tkYXRhWzBdXS5pZnJhbWVcbiAgICAgIHZhciBjb21wU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGlmcmFtZSlcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWZyYW1lOiBpZnJhbWUsXG4gICAgICAgIGlkOiBkYXRhWzBdLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCArIGdldFBhZGRpbmdFbmRzKGNvbXBTdHlsZSkgKyBnZXRCb3JkZXJFbmRzKGNvbXBTdHlsZSksXG4gICAgICAgIHdpZHRoOiBkYXRhWzJdLFxuICAgICAgICB0eXBlOiBkYXRhWzNdXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFkZGluZ0VuZHMoY29tcFN0eWxlKSB7XG4gICAgICBpZiAoY29tcFN0eWxlLmJveFNpemluZyAhPT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgICB2YXIgdG9wID0gY29tcFN0eWxlLnBhZGRpbmdUb3AgPyBwYXJzZUludChjb21wU3R5bGUucGFkZGluZ1RvcCwgMTApIDogMFxuICAgICAgdmFyIGJvdCA9IGNvbXBTdHlsZS5wYWRkaW5nQm90dG9tXG4gICAgICAgID8gcGFyc2VJbnQoY29tcFN0eWxlLnBhZGRpbmdCb3R0b20sIDEwKVxuICAgICAgICA6IDBcbiAgICAgIHJldHVybiB0b3AgKyBib3RcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRCb3JkZXJFbmRzKGNvbXBTdHlsZSkge1xuICAgICAgaWYgKGNvbXBTdHlsZS5ib3hTaXppbmcgIT09ICdib3JkZXItYm94Jykge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfVxuICAgICAgdmFyIHRvcCA9IGNvbXBTdHlsZS5ib3JkZXJUb3BXaWR0aFxuICAgICAgICA/IHBhcnNlSW50KGNvbXBTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTApXG4gICAgICAgIDogMFxuICAgICAgdmFyIGJvdCA9IGNvbXBTdHlsZS5ib3JkZXJCb3R0b21XaWR0aFxuICAgICAgICA/IHBhcnNlSW50KGNvbXBTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTApXG4gICAgICAgIDogMFxuICAgICAgcmV0dXJuIHRvcCArIGJvdFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuc3VyZUluUmFuZ2UoRGltZW5zaW9uKSB7XG4gICAgICB2YXIgbWF4ID0gTnVtYmVyKHNldHRpbmdzW2lmcmFtZUlkXVsnbWF4JyArIERpbWVuc2lvbl0pLFxuICAgICAgICBtaW4gPSBOdW1iZXIoc2V0dGluZ3NbaWZyYW1lSWRdWydtaW4nICsgRGltZW5zaW9uXSksXG4gICAgICAgIGRpbWVuc2lvbiA9IERpbWVuc2lvbi50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBzaXplID0gTnVtYmVyKG1lc3NhZ2VEYXRhW2RpbWVuc2lvbl0pXG5cbiAgICAgIGxvZyhpZnJhbWVJZCwgJ0NoZWNraW5nICcgKyBkaW1lbnNpb24gKyAnIGlzIGluIHJhbmdlICcgKyBtaW4gKyAnLScgKyBtYXgpXG5cbiAgICAgIGlmIChzaXplIDwgbWluKSB7XG4gICAgICAgIHNpemUgPSBtaW5cbiAgICAgICAgbG9nKGlmcmFtZUlkLCAnU2V0ICcgKyBkaW1lbnNpb24gKyAnIHRvIG1pbiB2YWx1ZScpXG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplID4gbWF4KSB7XG4gICAgICAgIHNpemUgPSBtYXhcbiAgICAgICAgbG9nKGlmcmFtZUlkLCAnU2V0ICcgKyBkaW1lbnNpb24gKyAnIHRvIG1heCB2YWx1ZScpXG4gICAgICB9XG5cbiAgICAgIG1lc3NhZ2VEYXRhW2RpbWVuc2lvbl0gPSAnJyArIHNpemVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01lc3NhZ2VGcm9tSUZyYW1lKCkge1xuICAgICAgZnVuY3Rpb24gY2hlY2tBbGxvd2VkT3JpZ2luKCkge1xuICAgICAgICBmdW5jdGlvbiBjaGVja0xpc3QoKSB7XG4gICAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgcmV0Q29kZSA9IGZhbHNlXG5cbiAgICAgICAgICBsb2coXG4gICAgICAgICAgICBpZnJhbWVJZCxcbiAgICAgICAgICAgICdDaGVja2luZyBjb25uZWN0aW9uIGlzIGZyb20gYWxsb3dlZCBsaXN0IG9mIG9yaWdpbnM6ICcgK1xuICAgICAgICAgICAgICBjaGVja09yaWdpblxuICAgICAgICAgIClcblxuICAgICAgICAgIGZvciAoOyBpIDwgY2hlY2tPcmlnaW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaGVja09yaWdpbltpXSA9PT0gb3JpZ2luKSB7XG4gICAgICAgICAgICAgIHJldENvZGUgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXRDb2RlXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjaGVja1NpbmdsZSgpIHtcbiAgICAgICAgICB2YXIgcmVtb3RlSG9zdCA9IHNldHRpbmdzW2lmcmFtZUlkXSAmJiBzZXR0aW5nc1tpZnJhbWVJZF0ucmVtb3RlSG9zdFxuICAgICAgICAgIGxvZyhpZnJhbWVJZCwgJ0NoZWNraW5nIGNvbm5lY3Rpb24gaXMgZnJvbTogJyArIHJlbW90ZUhvc3QpXG4gICAgICAgICAgcmV0dXJuIG9yaWdpbiA9PT0gcmVtb3RlSG9zdFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoZWNrT3JpZ2luLmNvbnN0cnVjdG9yID09PSBBcnJheSA/IGNoZWNrTGlzdCgpIDogY2hlY2tTaW5nbGUoKVxuICAgICAgfVxuXG4gICAgICB2YXIgb3JpZ2luID0gZXZlbnQub3JpZ2luLFxuICAgICAgICBjaGVja09yaWdpbiA9IHNldHRpbmdzW2lmcmFtZUlkXSAmJiBzZXR0aW5nc1tpZnJhbWVJZF0uY2hlY2tPcmlnaW5cblxuICAgICAgaWYgKGNoZWNrT3JpZ2luICYmICcnICsgb3JpZ2luICE9PSAnbnVsbCcgJiYgIWNoZWNrQWxsb3dlZE9yaWdpbigpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnVW5leHBlY3RlZCBtZXNzYWdlIHJlY2VpdmVkIGZyb206ICcgK1xuICAgICAgICAgICAgb3JpZ2luICtcbiAgICAgICAgICAgICcgZm9yICcgK1xuICAgICAgICAgICAgbWVzc2FnZURhdGEuaWZyYW1lLmlkICtcbiAgICAgICAgICAgICcuIE1lc3NhZ2Ugd2FzOiAnICtcbiAgICAgICAgICAgIGV2ZW50LmRhdGEgK1xuICAgICAgICAgICAgJy4gVGhpcyBlcnJvciBjYW4gYmUgZGlzYWJsZWQgYnkgc2V0dGluZyB0aGUgY2hlY2tPcmlnaW46IGZhbHNlIG9wdGlvbiBvciBieSBwcm92aWRpbmcgb2YgYXJyYXkgb2YgdHJ1c3RlZCBkb21haW5zLidcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTWVzc2FnZUZvclVzKCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgbXNnSWQgPT09ICgnJyArIG1zZykuc3Vic3RyKDAsIG1zZ0lkTGVuKSAmJlxuICAgICAgICBtc2cuc3Vic3RyKG1zZ0lkTGVuKS5zcGxpdCgnOicpWzBdIGluIHNldHRpbmdzXG4gICAgICApIC8vICcnK1Byb3RlY3RzIGFnYWluc3Qgbm9uLXN0cmluZyBtc2dcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01lc3NhZ2VGcm9tTWV0YVBhcmVudCgpIHtcbiAgICAgIC8vIFRlc3QgaWYgdGhpcyBtZXNzYWdlIGlzIGZyb20gYSBwYXJlbnQgYWJvdmUgdXMuIFRoaXMgaXMgYW4gdWdseSB0ZXN0LCBob3dldmVyLCB1cGRhdGluZ1xuICAgICAgLy8gdGhlIG1lc3NhZ2UgZm9ybWF0IHdvdWxkIGJyZWFrIGJhY2t3YXJkcyBjb21wYXRpYml0eS5cbiAgICAgIHZhciByZXRDb2RlID0gbWVzc2FnZURhdGEudHlwZSBpbiB7IHRydWU6IDEsIGZhbHNlOiAxLCB1bmRlZmluZWQ6IDEgfVxuXG4gICAgICBpZiAocmV0Q29kZSkge1xuICAgICAgICBsb2coaWZyYW1lSWQsICdJZ25vcmluZyBpbml0IG1lc3NhZ2UgZnJvbSBtZXRhIHBhcmVudCBwYWdlJylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldENvZGVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNc2dCb2R5KG9mZnNldCkge1xuICAgICAgcmV0dXJuIG1zZy5zdWJzdHIobXNnLmluZGV4T2YoJzonKSArIG1zZ0hlYWRlckxlbiArIG9mZnNldClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3J3YXJkTXNnRnJvbUlGcmFtZShtc2dCb2R5KSB7XG4gICAgICBsb2coXG4gICAgICAgIGlmcmFtZUlkLFxuICAgICAgICAnb25NZXNzYWdlIHBhc3NlZDoge2lmcmFtZTogJyArXG4gICAgICAgICAgbWVzc2FnZURhdGEuaWZyYW1lLmlkICtcbiAgICAgICAgICAnLCBtZXNzYWdlOiAnICtcbiAgICAgICAgICBtc2dCb2R5ICtcbiAgICAgICAgICAnfSdcbiAgICAgIClcblxuICAgICAgb24oJ29uTWVzc2FnZScsIHtcbiAgICAgICAgaWZyYW1lOiBtZXNzYWdlRGF0YS5pZnJhbWUsXG4gICAgICAgIG1lc3NhZ2U6IEpTT04ucGFyc2UobXNnQm9keSlcbiAgICAgIH0pXG5cbiAgICAgIGxvZyhpZnJhbWVJZCwgJy0tJylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYWdlSW5mbygpIHtcbiAgICAgIHZhciBib2R5UG9zaXRpb24gPSBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBpRnJhbWVQb3NpdGlvbiA9IG1lc3NhZ2VEYXRhLmlmcmFtZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBpZnJhbWVIZWlnaHQ6IGlGcmFtZVBvc2l0aW9uLmhlaWdodCxcbiAgICAgICAgaWZyYW1lV2lkdGg6IGlGcmFtZVBvc2l0aW9uLndpZHRoLFxuICAgICAgICBjbGllbnRIZWlnaHQ6IE1hdGgubWF4KFxuICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IHx8IDBcbiAgICAgICAgKSxcbiAgICAgICAgY2xpZW50V2lkdGg6IE1hdGgubWF4KFxuICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwXG4gICAgICAgICksXG4gICAgICAgIG9mZnNldFRvcDogcGFyc2VJbnQoaUZyYW1lUG9zaXRpb24udG9wIC0gYm9keVBvc2l0aW9uLnRvcCwgMTApLFxuICAgICAgICBvZmZzZXRMZWZ0OiBwYXJzZUludChpRnJhbWVQb3NpdGlvbi5sZWZ0IC0gYm9keVBvc2l0aW9uLmxlZnQsIDEwKSxcbiAgICAgICAgc2Nyb2xsVG9wOiB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICAgIHNjcm9sbExlZnQ6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgZG9jdW1lbnRIZWlnaHQ6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgIGRvY3VtZW50V2lkdGg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgd2luZG93SGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIHdpbmRvd1dpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZW5kUGFnZUluZm9Ub0lmcmFtZShpZnJhbWUsIGlmcmFtZUlkKSB7XG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWRUcmlnZ2VyKCkge1xuICAgICAgICB0cmlnZ2VyKCdTZW5kIFBhZ2UgSW5mbycsICdwYWdlSW5mbzonICsgZ2V0UGFnZUluZm8oKSwgaWZyYW1lLCBpZnJhbWVJZClcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlRnJhbWVFdmVudHMoZGVib3VuY2VkVHJpZ2dlciwgMzIsIGlmcmFtZUlkKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0UGFnZUluZm9Nb25pdG9yKCkge1xuICAgICAgZnVuY3Rpb24gc2V0TGlzdGVuZXIodHlwZSwgZnVuYykge1xuICAgICAgICBmdW5jdGlvbiBzZW5kUGFnZUluZm8oKSB7XG4gICAgICAgICAgaWYgKHNldHRpbmdzW2lkXSkge1xuICAgICAgICAgICAgc2VuZFBhZ2VJbmZvVG9JZnJhbWUoc2V0dGluZ3NbaWRdLmlmcmFtZSwgaWQpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0b3AoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIDtbJ3Njcm9sbCcsICdyZXNpemUnXS5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICBsb2coaWQsIHR5cGUgKyBldnQgKyAnIGxpc3RlbmVyIGZvciBzZW5kUGFnZUluZm8nKVxuICAgICAgICAgIGZ1bmMod2luZG93LCBldnQsIHNlbmRQYWdlSW5mbylcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgc2V0TGlzdGVuZXIoJ1JlbW92ZSAnLCByZW1vdmVFdmVudExpc3RlbmVyKVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgc2V0TGlzdGVuZXIoJ0FkZCAnLCBhZGRFdmVudExpc3RlbmVyKVxuICAgICAgfVxuXG4gICAgICB2YXIgaWQgPSBpZnJhbWVJZCAvLyBDcmVhdGUgbG9jYWxseSBzY29wZWQgY29weSBvZiBpRnJhbWUgSURcblxuICAgICAgc3RhcnQoKVxuXG4gICAgICBpZiAoc2V0dGluZ3NbaWRdKSB7XG4gICAgICAgIHNldHRpbmdzW2lkXS5zdG9wUGFnZUluZm8gPSBzdG9wXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RvcFBhZ2VJbmZvTW9uaXRvcigpIHtcbiAgICAgIGlmIChzZXR0aW5nc1tpZnJhbWVJZF0gJiYgc2V0dGluZ3NbaWZyYW1lSWRdLnN0b3BQYWdlSW5mbykge1xuICAgICAgICBzZXR0aW5nc1tpZnJhbWVJZF0uc3RvcFBhZ2VJbmZvKClcbiAgICAgICAgZGVsZXRlIHNldHRpbmdzW2lmcmFtZUlkXS5zdG9wUGFnZUluZm9cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0lGcmFtZUV4aXN0cygpIHtcbiAgICAgIHZhciByZXRCb29sID0gdHJ1ZVxuXG4gICAgICBpZiAobnVsbCA9PT0gbWVzc2FnZURhdGEuaWZyYW1lKSB7XG4gICAgICAgIHdhcm4oaWZyYW1lSWQsICdJRnJhbWUgKCcgKyBtZXNzYWdlRGF0YS5pZCArICcpIG5vdCBmb3VuZCcpXG4gICAgICAgIHJldEJvb2wgPSBmYWxzZVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJldEJvb2xcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFbGVtZW50UG9zaXRpb24odGFyZ2V0KSB7XG4gICAgICB2YXIgaUZyYW1lUG9zaXRpb24gPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgICAgZ2V0UGFnZVBvc2l0aW9uKGlmcmFtZUlkKVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBNYXRoLmZsb29yKE51bWJlcihpRnJhbWVQb3NpdGlvbi5sZWZ0KSArIE51bWJlcihwYWdlUG9zaXRpb24ueCkpLFxuICAgICAgICB5OiBNYXRoLmZsb29yKE51bWJlcihpRnJhbWVQb3NpdGlvbi50b3ApICsgTnVtYmVyKHBhZ2VQb3NpdGlvbi55KSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxSZXF1ZXN0RnJvbUNoaWxkKGFkZE9mZnNldCkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gLy8gTm90IHRlc3RhYmxlIGluIEthcm1hXG4gICAgICBmdW5jdGlvbiByZXBvc2l0aW9uKCkge1xuICAgICAgICBwYWdlUG9zaXRpb24gPSBuZXdQb3NpdGlvblxuICAgICAgICBzY3JvbGxUbygpXG4gICAgICAgIGxvZyhpZnJhbWVJZCwgJy0tJylcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FsY09mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBOdW1iZXIobWVzc2FnZURhdGEud2lkdGgpICsgb2Zmc2V0LngsXG4gICAgICAgICAgeTogTnVtYmVyKG1lc3NhZ2VEYXRhLmhlaWdodCkgKyBvZmZzZXQueVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNjcm9sbFBhcmVudCgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5wYXJlbnRJRnJhbWUpIHtcbiAgICAgICAgICB3aW5kb3cucGFyZW50SUZyYW1lWydzY3JvbGxUbycgKyAoYWRkT2Zmc2V0ID8gJ09mZnNldCcgOiAnJyldKFxuICAgICAgICAgICAgbmV3UG9zaXRpb24ueCxcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uLnlcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGlmcmFtZUlkLFxuICAgICAgICAgICAgJ1VuYWJsZSB0byBzY3JvbGwgdG8gcmVxdWVzdGVkIHBvc2l0aW9uLCB3aW5kb3cucGFyZW50SUZyYW1lIG5vdCBmb3VuZCdcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIG9mZnNldCA9IGFkZE9mZnNldFxuICAgICAgICAgID8gZ2V0RWxlbWVudFBvc2l0aW9uKG1lc3NhZ2VEYXRhLmlmcmFtZSlcbiAgICAgICAgICA6IHsgeDogMCwgeTogMCB9LFxuICAgICAgICBuZXdQb3NpdGlvbiA9IGNhbGNPZmZzZXQoKVxuXG4gICAgICBsb2coXG4gICAgICAgIGlmcmFtZUlkLFxuICAgICAgICAnUmVwb3NpdGlvbiByZXF1ZXN0ZWQgZnJvbSBpRnJhbWUgKG9mZnNldCB4OicgK1xuICAgICAgICAgIG9mZnNldC54ICtcbiAgICAgICAgICAnIHk6JyArXG4gICAgICAgICAgb2Zmc2V0LnkgK1xuICAgICAgICAgICcpJ1xuICAgICAgKVxuXG4gICAgICBpZiAod2luZG93LnRvcCAhPT0gd2luZG93LnNlbGYpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcG9zaXRpb24oKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvKCkge1xuICAgICAgaWYgKGZhbHNlICE9PSBvbignb25TY3JvbGwnLCBwYWdlUG9zaXRpb24pKSB7XG4gICAgICAgIHNldFBhZ2VQb3NpdGlvbihpZnJhbWVJZClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuc2V0UGFnZVBvc2l0aW9uKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kVGFyZ2V0KGxvY2F0aW9uKSB7XG4gICAgICBmdW5jdGlvbiBqdW1wVG9UYXJnZXQoKSB7XG4gICAgICAgIHZhciBqdW1wUG9zaXRpb24gPSBnZXRFbGVtZW50UG9zaXRpb24odGFyZ2V0KVxuXG4gICAgICAgIGxvZyhcbiAgICAgICAgICBpZnJhbWVJZCxcbiAgICAgICAgICAnTW92aW5nIHRvIGluIHBhZ2UgbGluayAoIycgK1xuICAgICAgICAgICAgaGFzaCArXG4gICAgICAgICAgICAnKSBhdCB4OiAnICtcbiAgICAgICAgICAgIGp1bXBQb3NpdGlvbi54ICtcbiAgICAgICAgICAgICcgeTogJyArXG4gICAgICAgICAgICBqdW1wUG9zaXRpb24ueVxuICAgICAgICApXG4gICAgICAgIHBhZ2VQb3NpdGlvbiA9IHtcbiAgICAgICAgICB4OiBqdW1wUG9zaXRpb24ueCxcbiAgICAgICAgICB5OiBqdW1wUG9zaXRpb24ueVxuICAgICAgICB9XG5cbiAgICAgICAgc2Nyb2xsVG8oKVxuICAgICAgICBsb2coaWZyYW1lSWQsICctLScpXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGp1bXBUb1BhcmVudCgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5wYXJlbnRJRnJhbWUpIHtcbiAgICAgICAgICB3aW5kb3cucGFyZW50SUZyYW1lLm1vdmVUb0FuY2hvcihoYXNoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZyhcbiAgICAgICAgICAgIGlmcmFtZUlkLFxuICAgICAgICAgICAgJ0luIHBhZ2UgbGluayAjJyArXG4gICAgICAgICAgICAgIGhhc2ggK1xuICAgICAgICAgICAgICAnIG5vdCBmb3VuZCBhbmQgd2luZG93LnBhcmVudElGcmFtZSBub3QgZm91bmQnXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBoYXNoID0gbG9jYXRpb24uc3BsaXQoJyMnKVsxXSB8fCAnJyxcbiAgICAgICAgaGFzaERhdGEgPSBkZWNvZGVVUklDb21wb25lbnQoaGFzaCksXG4gICAgICAgIHRhcmdldCA9XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaERhdGEpIHx8XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaERhdGEpWzBdXG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAganVtcFRvVGFyZ2V0KClcbiAgICAgIH0gZWxzZSBpZiAod2luZG93LnRvcCAhPT0gd2luZG93LnNlbGYpIHtcbiAgICAgICAganVtcFRvUGFyZW50KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZyhpZnJhbWVJZCwgJ0luIHBhZ2UgbGluayAjJyArIGhhc2ggKyAnIG5vdCBmb3VuZCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZShldmVudCkge1xuICAgICAgdmFyIG1vdXNlUG9zID0ge31cblxuICAgICAgaWYgKE51bWJlcihtZXNzYWdlRGF0YS53aWR0aCkgPT09IDAgJiYgTnVtYmVyKG1lc3NhZ2VEYXRhLmhlaWdodCkgPT09IDApIHtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRNc2dCb2R5KDkpLnNwbGl0KCc6JylcbiAgICAgICAgbW91c2VQb3MgPSB7XG4gICAgICAgICAgeDogZGF0YVsxXSxcbiAgICAgICAgICB5OiBkYXRhWzBdXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vdXNlUG9zID0ge1xuICAgICAgICAgIHg6IG1lc3NhZ2VEYXRhLndpZHRoLFxuICAgICAgICAgIHk6IG1lc3NhZ2VEYXRhLmhlaWdodFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uKGV2ZW50LCB7XG4gICAgICAgIGlmcmFtZTogbWVzc2FnZURhdGEuaWZyYW1lLFxuICAgICAgICBzY3JlZW5YOiBOdW1iZXIobW91c2VQb3MueCksXG4gICAgICAgIHNjcmVlblk6IE51bWJlcihtb3VzZVBvcy55KSxcbiAgICAgICAgdHlwZTogbWVzc2FnZURhdGEudHlwZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbihmdW5jTmFtZSwgdmFsKSB7XG4gICAgICByZXR1cm4gY2hrRXZlbnQoaWZyYW1lSWQsIGZ1bmNOYW1lLCB2YWwpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWN0aW9uTXNnKCkge1xuICAgICAgaWYgKHNldHRpbmdzW2lmcmFtZUlkXSAmJiBzZXR0aW5nc1tpZnJhbWVJZF0uZmlyc3RSdW4pIGZpcnN0UnVuKClcblxuICAgICAgc3dpdGNoIChtZXNzYWdlRGF0YS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2Nsb3NlJzpcbiAgICAgICAgICBjbG9zZUlGcmFtZShtZXNzYWdlRGF0YS5pZnJhbWUpXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgICBmb3J3YXJkTXNnRnJvbUlGcmFtZShnZXRNc2dCb2R5KDYpKVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgb25Nb3VzZSgnb25Nb3VzZUVudGVyJylcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ21vdXNlbGVhdmUnOlxuICAgICAgICAgIG9uTW91c2UoJ29uTW91c2VMZWF2ZScpXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdhdXRvUmVzaXplJzpcbiAgICAgICAgICBzZXR0aW5nc1tpZnJhbWVJZF0uYXV0b1Jlc2l6ZSA9IEpTT04ucGFyc2UoZ2V0TXNnQm9keSg5KSlcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ3Njcm9sbFRvJzpcbiAgICAgICAgICBzY3JvbGxSZXF1ZXN0RnJvbUNoaWxkKGZhbHNlKVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnc2Nyb2xsVG9PZmZzZXQnOlxuICAgICAgICAgIHNjcm9sbFJlcXVlc3RGcm9tQ2hpbGQodHJ1ZSlcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ3BhZ2VJbmZvJzpcbiAgICAgICAgICBzZW5kUGFnZUluZm9Ub0lmcmFtZShcbiAgICAgICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXSAmJiBzZXR0aW5nc1tpZnJhbWVJZF0uaWZyYW1lLFxuICAgICAgICAgICAgaWZyYW1lSWRcbiAgICAgICAgICApXG4gICAgICAgICAgc3RhcnRQYWdlSW5mb01vbml0b3IoKVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAncGFnZUluZm9TdG9wJzpcbiAgICAgICAgICBzdG9wUGFnZUluZm9Nb25pdG9yKClcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ2luUGFnZUxpbmsnOlxuICAgICAgICAgIGZpbmRUYXJnZXQoZ2V0TXNnQm9keSg5KSlcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICAgICAgICByZXNldElGcmFtZShtZXNzYWdlRGF0YSlcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ2luaXQnOlxuICAgICAgICAgIHJlc2l6ZUlGcmFtZSgpXG4gICAgICAgICAgb24oJ29uSW5pdCcsIG1lc3NhZ2VEYXRhLmlmcmFtZSlcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgTnVtYmVyKG1lc3NhZ2VEYXRhLndpZHRoKSA9PT0gMCAmJlxuICAgICAgICAgICAgTnVtYmVyKG1lc3NhZ2VEYXRhLmhlaWdodCkgPT09IDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICdVbnN1cHBvcnRlZCBtZXNzYWdlIHJlY2VpdmVkICgnICtcbiAgICAgICAgICAgICAgICBtZXNzYWdlRGF0YS50eXBlICtcbiAgICAgICAgICAgICAgICAnKSwgdGhpcyBpcyBsaWtlbHkgZHVlIHRvIHRoZSBpZnJhbWUgY29udGFpbmluZyBhIGxhdGVyICcgK1xuICAgICAgICAgICAgICAgICd2ZXJzaW9uIG9mIGlmcmFtZS1yZXNpemVyIHRoYW4gdGhlIHBhcmVudCBwYWdlJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNpemVJRnJhbWUoKVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNTZXR0aW5ncyhpZnJhbWVJZCkge1xuICAgICAgdmFyIHJldEJvb2wgPSB0cnVlXG5cbiAgICAgIGlmICghc2V0dGluZ3NbaWZyYW1lSWRdKSB7XG4gICAgICAgIHJldEJvb2wgPSBmYWxzZVxuICAgICAgICB3YXJuKFxuICAgICAgICAgIG1lc3NhZ2VEYXRhLnR5cGUgK1xuICAgICAgICAgICAgJyBObyBzZXR0aW5ncyBmb3IgJyArXG4gICAgICAgICAgICBpZnJhbWVJZCArXG4gICAgICAgICAgICAnLiBNZXNzYWdlIHdhczogJyArXG4gICAgICAgICAgICBtc2dcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0Qm9vbFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlGcmFtZVJlYWR5TXNnUmVjZWl2ZWQoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIGd1YXJkLWZvci1pblxuICAgICAgZm9yICh2YXIgaWZyYW1lSWQgaW4gc2V0dGluZ3MpIHtcbiAgICAgICAgdHJpZ2dlcihcbiAgICAgICAgICAnaUZyYW1lIHJlcXVlc3RlZCBpbml0JyxcbiAgICAgICAgICBjcmVhdGVPdXRnb2luZ01zZyhpZnJhbWVJZCksXG4gICAgICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmlmcmFtZSxcbiAgICAgICAgICBpZnJhbWVJZFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlyc3RSdW4oKSB7XG4gICAgICBpZiAoc2V0dGluZ3NbaWZyYW1lSWRdKSB7XG4gICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXS5maXJzdFJ1biA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1zZyA9IGV2ZW50LmRhdGEsXG4gICAgICBtZXNzYWdlRGF0YSA9IHt9LFxuICAgICAgaWZyYW1lSWQgPSBudWxsXG5cbiAgICBpZiAoJ1tpRnJhbWVSZXNpemVyQ2hpbGRdUmVhZHknID09PSBtc2cpIHtcbiAgICAgIGlGcmFtZVJlYWR5TXNnUmVjZWl2ZWQoKVxuICAgIH0gZWxzZSBpZiAoaXNNZXNzYWdlRm9yVXMoKSkge1xuICAgICAgbWVzc2FnZURhdGEgPSBwcm9jZXNzTXNnKClcbiAgICAgIGlmcmFtZUlkID0gbWVzc2FnZURhdGEuaWRcbiAgICAgIGlmIChzZXR0aW5nc1tpZnJhbWVJZF0pIHtcbiAgICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmxvYWRlZCA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc01lc3NhZ2VGcm9tTWV0YVBhcmVudCgpICYmIGhhc1NldHRpbmdzKGlmcmFtZUlkKSkge1xuICAgICAgICBsb2coaWZyYW1lSWQsICdSZWNlaXZlZDogJyArIG1zZylcblxuICAgICAgICBpZiAoY2hlY2tJRnJhbWVFeGlzdHMoKSAmJiBpc01lc3NhZ2VGcm9tSUZyYW1lKCkpIHtcbiAgICAgICAgICBhY3Rpb25Nc2coKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZm8oaWZyYW1lSWQsICdJZ25vcmVkOiAnICsgbXNnKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoa0V2ZW50KGlmcmFtZUlkLCBmdW5jTmFtZSwgdmFsKSB7XG4gICAgdmFyIGZ1bmMgPSBudWxsLFxuICAgICAgcmV0VmFsID0gbnVsbFxuXG4gICAgaWYgKHNldHRpbmdzW2lmcmFtZUlkXSkge1xuICAgICAgZnVuYyA9IHNldHRpbmdzW2lmcmFtZUlkXVtmdW5jTmFtZV1cblxuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmdW5jKSB7XG4gICAgICAgIHJldFZhbCA9IGZ1bmModmFsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBmdW5jTmFtZSArICcgb24gaUZyYW1lWycgKyBpZnJhbWVJZCArICddIGlzIG5vdCBhIGZ1bmN0aW9uJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldFZhbFxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlSWZyYW1lTGlzdGVuZXJzKGlmcmFtZSkge1xuICAgIHZhciBpZnJhbWVJZCA9IGlmcmFtZS5pZFxuICAgIGRlbGV0ZSBzZXR0aW5nc1tpZnJhbWVJZF1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlSUZyYW1lKGlmcmFtZSkge1xuICAgIHZhciBpZnJhbWVJZCA9IGlmcmFtZS5pZFxuICAgIGlmIChjaGtFdmVudChpZnJhbWVJZCwgJ29uQ2xvc2UnLCBpZnJhbWVJZCkgPT09IGZhbHNlKSB7XG4gICAgICBsb2coaWZyYW1lSWQsICdDbG9zZSBpZnJhbWUgY2FuY2VsbGVkIGJ5IG9uQ2xvc2UgZXZlbnQnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGxvZyhpZnJhbWVJZCwgJ1JlbW92aW5nIGlGcmFtZTogJyArIGlmcmFtZUlkKVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIENhdGNoIHJhY2UgY29uZGl0aW9uIGVycm9yIHdpdGggUmVhY3RcbiAgICAgIGlmIChpZnJhbWUucGFyZW50Tm9kZSkge1xuICAgICAgICBpZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWUpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHdhcm4oZXJyb3IpXG4gICAgfVxuXG4gICAgY2hrRXZlbnQoaWZyYW1lSWQsICdvbkNsb3NlZCcsIGlmcmFtZUlkKVxuICAgIGxvZyhpZnJhbWVJZCwgJy0tJylcbiAgICByZW1vdmVJZnJhbWVMaXN0ZW5lcnMoaWZyYW1lKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGFnZVBvc2l0aW9uKGlmcmFtZUlkKSB7XG4gICAgaWYgKG51bGwgPT09IHBhZ2VQb3NpdGlvbikge1xuICAgICAgcGFnZVBvc2l0aW9uID0ge1xuICAgICAgICB4OlxuICAgICAgICAgIHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHdpbmRvdy5wYWdlWE9mZnNldFxuICAgICAgICAgICAgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgICAgeTpcbiAgICAgICAgICB3aW5kb3cucGFnZVlPZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgICAgIDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgICAgfVxuICAgICAgbG9nKFxuICAgICAgICBpZnJhbWVJZCxcbiAgICAgICAgJ0dldCBwYWdlIHBvc2l0aW9uOiAnICsgcGFnZVBvc2l0aW9uLnggKyAnLCcgKyBwYWdlUG9zaXRpb24ueVxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFBhZ2VQb3NpdGlvbihpZnJhbWVJZCkge1xuICAgIGlmIChudWxsICE9PSBwYWdlUG9zaXRpb24pIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyhwYWdlUG9zaXRpb24ueCwgcGFnZVBvc2l0aW9uLnkpXG4gICAgICBsb2coXG4gICAgICAgIGlmcmFtZUlkLFxuICAgICAgICAnU2V0IHBhZ2UgcG9zaXRpb246ICcgKyBwYWdlUG9zaXRpb24ueCArICcsJyArIHBhZ2VQb3NpdGlvbi55XG4gICAgICApXG4gICAgICB1bnNldFBhZ2VQb3NpdGlvbigpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdW5zZXRQYWdlUG9zaXRpb24oKSB7XG4gICAgcGFnZVBvc2l0aW9uID0gbnVsbFxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRJRnJhbWUobWVzc2FnZURhdGEpIHtcbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHNldFNpemUobWVzc2FnZURhdGEpXG4gICAgICB0cmlnZ2VyKCdyZXNldCcsICdyZXNldCcsIG1lc3NhZ2VEYXRhLmlmcmFtZSwgbWVzc2FnZURhdGEuaWQpXG4gICAgfVxuXG4gICAgbG9nKFxuICAgICAgbWVzc2FnZURhdGEuaWQsXG4gICAgICAnU2l6ZSByZXNldCByZXF1ZXN0ZWQgYnkgJyArXG4gICAgICAgICgnaW5pdCcgPT09IG1lc3NhZ2VEYXRhLnR5cGUgPyAnaG9zdCBwYWdlJyA6ICdpRnJhbWUnKVxuICAgIClcbiAgICBnZXRQYWdlUG9zaXRpb24obWVzc2FnZURhdGEuaWQpXG4gICAgc3luY1Jlc2l6ZShyZXNldCwgbWVzc2FnZURhdGEsICdyZXNldCcpXG4gIH1cblxuICBmdW5jdGlvbiBzZXRTaXplKG1lc3NhZ2VEYXRhKSB7XG4gICAgZnVuY3Rpb24gc2V0RGltZW5zaW9uKGRpbWVuc2lvbikge1xuICAgICAgaWYgKCFtZXNzYWdlRGF0YS5pZCkge1xuICAgICAgICBsb2coJ3VuZGVmaW5lZCcsICdtZXNzYWdlRGF0YSBpZCBub3Qgc2V0JylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBtZXNzYWdlRGF0YS5pZnJhbWUuc3R5bGVbZGltZW5zaW9uXSA9IG1lc3NhZ2VEYXRhW2RpbWVuc2lvbl0gKyAncHgnXG4gICAgICBsb2coXG4gICAgICAgIG1lc3NhZ2VEYXRhLmlkLFxuICAgICAgICAnSUZyYW1lICgnICtcbiAgICAgICAgICBpZnJhbWVJZCArXG4gICAgICAgICAgJykgJyArXG4gICAgICAgICAgZGltZW5zaW9uICtcbiAgICAgICAgICAnIHNldCB0byAnICtcbiAgICAgICAgICBtZXNzYWdlRGF0YVtkaW1lbnNpb25dICtcbiAgICAgICAgICAncHgnXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hrWmVybyhkaW1lbnNpb24pIHtcbiAgICAgIC8vIEZpcmVGb3ggc2V0cyBkaW1lbnNpb24gb2YgaGlkZGVuIGlGcmFtZXMgdG8gemVyby5cbiAgICAgIC8vIFNvIGlmIHdlIGRldGVjdCB0aGF0IHNldCB1cCBhbiBldmVudCB0byBjaGVjayBmb3JcbiAgICAgIC8vIHdoZW4gaUZyYW1lIGJlY29tZXMgdmlzaWJsZS5cblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gLy8gTm90IHRlc3RhYmxlIGluIFBoYW50b21KU1xuICAgICAgaWYgKCFoaWRkZW5DaGVja0VuYWJsZWQgJiYgJzAnID09PSBtZXNzYWdlRGF0YVtkaW1lbnNpb25dKSB7XG4gICAgICAgIGhpZGRlbkNoZWNrRW5hYmxlZCA9IHRydWVcbiAgICAgICAgbG9nKGlmcmFtZUlkLCAnSGlkZGVuIGlGcmFtZSBkZXRlY3RlZCwgY3JlYXRpbmcgdmlzaWJpbGl0eSBsaXN0ZW5lcicpXG4gICAgICAgIGZpeEhpZGRlbklGcmFtZXMoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NEaW1lbnNpb24oZGltZW5zaW9uKSB7XG4gICAgICBzZXREaW1lbnNpb24oZGltZW5zaW9uKVxuICAgICAgY2hrWmVybyhkaW1lbnNpb24pXG4gICAgfVxuXG4gICAgdmFyIGlmcmFtZUlkID0gbWVzc2FnZURhdGEuaWZyYW1lLmlkXG5cbiAgICBpZiAoc2V0dGluZ3NbaWZyYW1lSWRdKSB7XG4gICAgICBpZiAoc2V0dGluZ3NbaWZyYW1lSWRdLnNpemVIZWlnaHQpIHtcbiAgICAgICAgcHJvY2Vzc0RpbWVuc2lvbignaGVpZ2h0JylcbiAgICAgIH1cbiAgICAgIGlmIChzZXR0aW5nc1tpZnJhbWVJZF0uc2l6ZVdpZHRoKSB7XG4gICAgICAgIHByb2Nlc3NEaW1lbnNpb24oJ3dpZHRoJylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzeW5jUmVzaXplKGZ1bmMsIG1lc3NhZ2VEYXRhLCBkb05vdFN5bmMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gTm90IHRlc3RhYmxlIGluIFBoYW50b21KU1xuICAgIGlmIChcbiAgICAgIGRvTm90U3luYyAhPT0gbWVzc2FnZURhdGEudHlwZSAmJlxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICYmXG4gICAgICAvLyBpbmNsdWRpbmcgY2hlY2sgZm9yIGphc21pbmUgYmVjYXVzZSBoYWQgdHJvdWJsZSBnZXR0aW5nIHNweSB0byB3b3JrIGluIHVuaXQgdGVzdCB1c2luZyByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICF3aW5kb3cuamFzbWluZVxuICAgICkge1xuICAgICAgbG9nKG1lc3NhZ2VEYXRhLmlkLCAnUmVxdWVzdGluZyBhbmltYXRpb24gZnJhbWUnKVxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bmMoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaWdnZXIoY2FsbGVlTXNnLCBtc2csIGlmcmFtZSwgaWQsIG5vUmVzcG9uc2VXYXJuaW5nKSB7XG4gICAgZnVuY3Rpb24gcG9zdE1lc3NhZ2VUb0lGcmFtZSgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBzZXR0aW5nc1tpZF0gJiYgc2V0dGluZ3NbaWRdLnRhcmdldE9yaWdpblxuICAgICAgbG9nKFxuICAgICAgICBpZCxcbiAgICAgICAgJ1snICtcbiAgICAgICAgICBjYWxsZWVNc2cgK1xuICAgICAgICAgICddIFNlbmRpbmcgbXNnIHRvIGlmcmFtZVsnICtcbiAgICAgICAgICBpZCArXG4gICAgICAgICAgJ10gKCcgK1xuICAgICAgICAgIG1zZyArXG4gICAgICAgICAgJykgdGFyZ2V0T3JpZ2luOiAnICtcbiAgICAgICAgICB0YXJnZXRcbiAgICAgIClcbiAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1zZ0lkICsgbXNnLCB0YXJnZXQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaUZyYW1lTm90Rm91bmQoKSB7XG4gICAgICB3YXJuKGlkLCAnWycgKyBjYWxsZWVNc2cgKyAnXSBJRnJhbWUoJyArIGlkICsgJykgbm90IGZvdW5kJylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGtBbmRTZW5kKCkge1xuICAgICAgaWYgKFxuICAgICAgICBpZnJhbWUgJiZcbiAgICAgICAgJ2NvbnRlbnRXaW5kb3cnIGluIGlmcmFtZSAmJlxuICAgICAgICBudWxsICE9PSBpZnJhbWUuY29udGVudFdpbmRvd1xuICAgICAgKSB7XG4gICAgICAgIC8vIE51bGwgdGVzdCBmb3IgUGhhbnRvbUpTXG4gICAgICAgIHBvc3RNZXNzYWdlVG9JRnJhbWUoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaUZyYW1lTm90Rm91bmQoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm5Pbk5vUmVzcG9uc2UoKSB7XG4gICAgICBmdW5jdGlvbiB3YXJuaW5nKCkge1xuICAgICAgICBpZiAoc2V0dGluZ3NbaWRdICYmICFzZXR0aW5nc1tpZF0ubG9hZGVkICYmICFlcnJvclNob3duKSB7XG4gICAgICAgICAgZXJyb3JTaG93biA9IHRydWVcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAnSUZyYW1lIGhhcyBub3QgcmVzcG9uZGVkIHdpdGhpbiAnICtcbiAgICAgICAgICAgICAgc2V0dGluZ3NbaWRdLndhcm5pbmdUaW1lb3V0IC8gMTAwMCArXG4gICAgICAgICAgICAgICcgc2Vjb25kcy4gQ2hlY2sgaUZyYW1lUmVzaXplci5jb250ZW50V2luZG93LmpzIGhhcyBiZWVuIGxvYWRlZCBpbiBpRnJhbWUuIFRoaXMgbWVzc2FnZSBjYW4gYmUgaWdub3JlZCBpZiBldmVyeXRoaW5nIGlzIHdvcmtpbmcsIG9yIHlvdSBjYW4gc2V0IHRoZSB3YXJuaW5nVGltZW91dCBvcHRpb24gdG8gYSBoaWdoZXIgdmFsdWUgb3IgemVybyB0byBzdXBwcmVzcyB0aGlzIHdhcm5pbmcuJ1xuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgICEhbm9SZXNwb25zZVdhcm5pbmcgJiZcbiAgICAgICAgc2V0dGluZ3NbaWRdICYmXG4gICAgICAgICEhc2V0dGluZ3NbaWRdLndhcm5pbmdUaW1lb3V0XG4gICAgICApIHtcbiAgICAgICAgc2V0dGluZ3NbaWRdLm1zZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgIHdhcm5pbmcsXG4gICAgICAgICAgc2V0dGluZ3NbaWRdLndhcm5pbmdUaW1lb3V0XG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZXJyb3JTaG93biA9IGZhbHNlXG5cbiAgICBpZCA9IGlkIHx8IGlmcmFtZS5pZFxuXG4gICAgaWYgKHNldHRpbmdzW2lkXSkge1xuICAgICAgY2hrQW5kU2VuZCgpXG4gICAgICB3YXJuT25Ob1Jlc3BvbnNlKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVPdXRnb2luZ01zZyhpZnJhbWVJZCkge1xuICAgIHJldHVybiAoXG4gICAgICBpZnJhbWVJZCArXG4gICAgICAnOicgK1xuICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmJvZHlNYXJnaW5WMSArXG4gICAgICAnOicgK1xuICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLnNpemVXaWR0aCArXG4gICAgICAnOicgK1xuICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmxvZyArXG4gICAgICAnOicgK1xuICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmludGVydmFsICtcbiAgICAgICc6JyArXG4gICAgICBzZXR0aW5nc1tpZnJhbWVJZF0uZW5hYmxlUHVibGljTWV0aG9kcyArXG4gICAgICAnOicgK1xuICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmF1dG9SZXNpemUgK1xuICAgICAgJzonICtcbiAgICAgIHNldHRpbmdzW2lmcmFtZUlkXS5ib2R5TWFyZ2luICtcbiAgICAgICc6JyArXG4gICAgICBzZXR0aW5nc1tpZnJhbWVJZF0uaGVpZ2h0Q2FsY3VsYXRpb25NZXRob2QgK1xuICAgICAgJzonICtcbiAgICAgIHNldHRpbmdzW2lmcmFtZUlkXS5ib2R5QmFja2dyb3VuZCArXG4gICAgICAnOicgK1xuICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmJvZHlQYWRkaW5nICtcbiAgICAgICc6JyArXG4gICAgICBzZXR0aW5nc1tpZnJhbWVJZF0udG9sZXJhbmNlICtcbiAgICAgICc6JyArXG4gICAgICBzZXR0aW5nc1tpZnJhbWVJZF0uaW5QYWdlTGlua3MgK1xuICAgICAgJzonICtcbiAgICAgIHNldHRpbmdzW2lmcmFtZUlkXS5yZXNpemVGcm9tICtcbiAgICAgICc6JyArXG4gICAgICBzZXR0aW5nc1tpZnJhbWVJZF0ud2lkdGhDYWxjdWxhdGlvbk1ldGhvZCArXG4gICAgICAnOicgK1xuICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLm1vdXNlRXZlbnRzXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0dXBJRnJhbWUoaWZyYW1lLCBvcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gc2V0TGltaXRzKCkge1xuICAgICAgZnVuY3Rpb24gYWRkU3R5bGUoc3R5bGUpIHtcbiAgICAgICAgdmFyIHN0eWxlVmFsdWUgPSBzZXR0aW5nc1tpZnJhbWVJZF1bc3R5bGVdXG4gICAgICAgIGlmIChJbmZpbml0eSAhPT0gc3R5bGVWYWx1ZSAmJiAwICE9PSBzdHlsZVZhbHVlKSB7XG4gICAgICAgICAgaWZyYW1lLnN0eWxlW3N0eWxlXSA9IGlzTnVtYmVyKHN0eWxlVmFsdWUpXG4gICAgICAgICAgICA/IHN0eWxlVmFsdWUgKyAncHgnXG4gICAgICAgICAgICA6IHN0eWxlVmFsdWVcbiAgICAgICAgICBsb2coaWZyYW1lSWQsICdTZXQgJyArIHN0eWxlICsgJyA9ICcgKyBpZnJhbWUuc3R5bGVbc3R5bGVdKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoa01pbk1heChkaW1lbnNpb24pIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXVsnbWluJyArIGRpbWVuc2lvbl0gPlxuICAgICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXVsnbWF4JyArIGRpbWVuc2lvbl1cbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1ZhbHVlIGZvciBtaW4nICtcbiAgICAgICAgICAgICAgZGltZW5zaW9uICtcbiAgICAgICAgICAgICAgJyBjYW4gbm90IGJlIGdyZWF0ZXIgdGhhbiBtYXgnICtcbiAgICAgICAgICAgICAgZGltZW5zaW9uXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoa01pbk1heCgnSGVpZ2h0JylcbiAgICAgIGNoa01pbk1heCgnV2lkdGgnKVxuXG4gICAgICBhZGRTdHlsZSgnbWF4SGVpZ2h0JylcbiAgICAgIGFkZFN0eWxlKCdtaW5IZWlnaHQnKVxuICAgICAgYWRkU3R5bGUoJ21heFdpZHRoJylcbiAgICAgIGFkZFN0eWxlKCdtaW5XaWR0aCcpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3SWQoKSB7XG4gICAgICB2YXIgaWQgPSAob3B0aW9ucyAmJiBvcHRpb25zLmlkKSB8fCBkZWZhdWx0cy5pZCArIGNvdW50KytcbiAgICAgIGlmIChudWxsICE9PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkpIHtcbiAgICAgICAgaWQgKz0gY291bnQrK1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlkXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5zdXJlSGFzSWQoaWZyYW1lSWQpIHtcbiAgICAgIGlmICgnJyA9PT0gaWZyYW1lSWQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW11bHRpLWFzc2lnblxuICAgICAgICBpZnJhbWUuaWQgPSBpZnJhbWVJZCA9IG5ld0lkKClcbiAgICAgICAgbG9nRW5hYmxlZCA9IChvcHRpb25zIHx8IHt9KS5sb2dcbiAgICAgICAgbG9nKFxuICAgICAgICAgIGlmcmFtZUlkLFxuICAgICAgICAgICdBZGRlZCBtaXNzaW5nIGlmcmFtZSBJRDogJyArIGlmcmFtZUlkICsgJyAoJyArIGlmcmFtZS5zcmMgKyAnKSdcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaWZyYW1lSWRcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTY3JvbGxpbmcoKSB7XG4gICAgICBsb2coXG4gICAgICAgIGlmcmFtZUlkLFxuICAgICAgICAnSUZyYW1lIHNjcm9sbGluZyAnICtcbiAgICAgICAgICAoc2V0dGluZ3NbaWZyYW1lSWRdICYmIHNldHRpbmdzW2lmcmFtZUlkXS5zY3JvbGxpbmdcbiAgICAgICAgICAgID8gJ2VuYWJsZWQnXG4gICAgICAgICAgICA6ICdkaXNhYmxlZCcpICtcbiAgICAgICAgICAnIGZvciAnICtcbiAgICAgICAgICBpZnJhbWVJZFxuICAgICAgKVxuICAgICAgaWZyYW1lLnN0eWxlLm92ZXJmbG93ID1cbiAgICAgICAgZmFsc2UgPT09IChzZXR0aW5nc1tpZnJhbWVJZF0gJiYgc2V0dGluZ3NbaWZyYW1lSWRdLnNjcm9sbGluZylcbiAgICAgICAgICA/ICdoaWRkZW4nXG4gICAgICAgICAgOiAnYXV0bydcbiAgICAgIHN3aXRjaCAoc2V0dGluZ3NbaWZyYW1lSWRdICYmIHNldHRpbmdzW2lmcmFtZUlkXS5zY3JvbGxpbmcpIHtcbiAgICAgICAgY2FzZSAnb21pdCc6XG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlIHRydWU6XG4gICAgICAgICAgaWZyYW1lLnNjcm9sbGluZyA9ICd5ZXMnXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICAgIGlmcmFtZS5zY3JvbGxpbmcgPSAnbm8nXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmcmFtZS5zY3JvbGxpbmcgPSBzZXR0aW5nc1tpZnJhbWVJZF1cbiAgICAgICAgICAgID8gc2V0dGluZ3NbaWZyYW1lSWRdLnNjcm9sbGluZ1xuICAgICAgICAgICAgOiAnbm8nXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlIFYxIGlGcmFtZSBzY3JpcHQgZXhwZWN0cyBhbiBpbnQsIHdoZXJlIGFzIGluIFYyIGV4cGVjdHMgYSBDU1NcbiAgICAvLyBzdHJpbmcgdmFsdWUgc3VjaCBhcyAnMXB4IDNlbScsIHNvIGlmIHdlIGhhdmUgYW4gaW50IGZvciBWMiwgc2V0IFYxPVYyXG4gICAgLy8gYW5kIHRoZW4gY29udmVydCBWMiB0byBhIHN0cmluZyBQWCB2YWx1ZS5cbiAgICBmdW5jdGlvbiBzZXR1cEJvZHlNYXJnaW5WYWx1ZXMoKSB7XG4gICAgICBpZiAoXG4gICAgICAgICdudW1iZXInID09PVxuICAgICAgICAgIHR5cGVvZiAoc2V0dGluZ3NbaWZyYW1lSWRdICYmIHNldHRpbmdzW2lmcmFtZUlkXS5ib2R5TWFyZ2luKSB8fFxuICAgICAgICAnMCcgPT09IChzZXR0aW5nc1tpZnJhbWVJZF0gJiYgc2V0dGluZ3NbaWZyYW1lSWRdLmJvZHlNYXJnaW4pXG4gICAgICApIHtcbiAgICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmJvZHlNYXJnaW5WMSA9IHNldHRpbmdzW2lmcmFtZUlkXS5ib2R5TWFyZ2luXG4gICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXS5ib2R5TWFyZ2luID1cbiAgICAgICAgICAnJyArIHNldHRpbmdzW2lmcmFtZUlkXS5ib2R5TWFyZ2luICsgJ3B4J1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrUmVzZXQoKSB7XG4gICAgICAvLyBSZWR1Y2Ugc2NvcGUgb2YgZmlyc3RSdW4gdG8gZnVuY3Rpb24sIGJlY2F1c2UgSUU4J3MgSlMgZXhlY3V0aW9uXG4gICAgICAvLyBjb250ZXh0IHN0YWNrIGlzIGJvcmtlZCBhbmQgdGhpcyB2YWx1ZSBnZXRzIGV4dGVybmFsbHlcbiAgICAgIC8vIGNoYW5nZWQgbWlkd2F5IHRocm91Z2ggcnVubmluZyB0aGlzIGZ1bmN0aW9uISEhXG4gICAgICB2YXIgZmlyc3RSdW4gPSBzZXR0aW5nc1tpZnJhbWVJZF0gJiYgc2V0dGluZ3NbaWZyYW1lSWRdLmZpcnN0UnVuLFxuICAgICAgICByZXNldFJlcXVlcnRNZXRob2QgPVxuICAgICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXSAmJlxuICAgICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXS5oZWlnaHRDYWxjdWxhdGlvbk1ldGhvZCBpbiByZXNldFJlcXVpcmVkTWV0aG9kc1xuXG4gICAgICBpZiAoIWZpcnN0UnVuICYmIHJlc2V0UmVxdWVydE1ldGhvZCkge1xuICAgICAgICByZXNldElGcmFtZSh7IGlmcmFtZTogaWZyYW1lLCBoZWlnaHQ6IDAsIHdpZHRoOiAwLCB0eXBlOiAnaW5pdCcgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cElGcmFtZU9iamVjdCgpIHtcbiAgICAgIGlmIChzZXR0aW5nc1tpZnJhbWVJZF0pIHtcbiAgICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmlmcmFtZS5pRnJhbWVSZXNpemVyID0ge1xuICAgICAgICAgIGNsb3NlOiBjbG9zZUlGcmFtZS5iaW5kKG51bGwsIHNldHRpbmdzW2lmcmFtZUlkXS5pZnJhbWUpLFxuXG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXJzOiByZW1vdmVJZnJhbWVMaXN0ZW5lcnMuYmluZChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBzZXR0aW5nc1tpZnJhbWVJZF0uaWZyYW1lXG4gICAgICAgICAgKSxcblxuICAgICAgICAgIHJlc2l6ZTogdHJpZ2dlci5iaW5kKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdXaW5kb3cgcmVzaXplJyxcbiAgICAgICAgICAgICdyZXNpemUnLFxuICAgICAgICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmlmcmFtZVxuICAgICAgICAgICksXG5cbiAgICAgICAgICBtb3ZlVG9BbmNob3I6IGZ1bmN0aW9uIChhbmNob3IpIHtcbiAgICAgICAgICAgIHRyaWdnZXIoXG4gICAgICAgICAgICAgICdNb3ZlIHRvIGFuY2hvcicsXG4gICAgICAgICAgICAgICdtb3ZlVG9BbmNob3I6JyArIGFuY2hvcixcbiAgICAgICAgICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmlmcmFtZSxcbiAgICAgICAgICAgICAgaWZyYW1lSWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc2VuZE1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSlcbiAgICAgICAgICAgIHRyaWdnZXIoXG4gICAgICAgICAgICAgICdTZW5kIE1lc3NhZ2UnLFxuICAgICAgICAgICAgICAnbWVzc2FnZTonICsgbWVzc2FnZSxcbiAgICAgICAgICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdLmlmcmFtZSxcbiAgICAgICAgICAgICAgaWZyYW1lSWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSBoYXZlIHRvIGNhbGwgdHJpZ2dlciB0d2ljZSwgYXMgd2UgY2FuIG5vdCBiZSBzdXJlIGlmIGFsbFxuICAgIC8vIGlmcmFtZXMgaGF2ZSBjb21wbGV0ZWQgbG9hZGluZyB3aGVuIHRoaXMgY29kZSBydW5zLiBUaGVcbiAgICAvLyBldmVudCBsaXN0ZW5lciBhbHNvIGNhdGNoZXMgdGhlIHBhZ2UgY2hhbmdpbmcgaW4gdGhlIGlGcmFtZS5cbiAgICBmdW5jdGlvbiBpbml0KG1zZykge1xuICAgICAgZnVuY3Rpb24gaUZyYW1lTG9hZGVkKCkge1xuICAgICAgICB0cmlnZ2VyKCdpRnJhbWUub25sb2FkJywgbXNnLCBpZnJhbWUsIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICAgICAgY2hlY2tSZXNldCgpXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZURlc3Ryb3lPYnNlcnZlcihNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAgIGlmICghaWZyYW1lLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZXN0cm95T2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlZE5vZGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobXV0YXRpb24ucmVtb3ZlZE5vZGVzKSAvLyBUcmFuc2Zvcm0gTm9kZUxpc3QgaW50byBhbiBBcnJheVxuICAgICAgICAgICAgcmVtb3ZlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHJlbW92ZWROb2RlKSB7XG4gICAgICAgICAgICAgIGlmIChyZW1vdmVkTm9kZSA9PT0gaWZyYW1lKSB7XG4gICAgICAgICAgICAgICAgY2xvc2VJRnJhbWUoaWZyYW1lKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIGRlc3Ryb3lPYnNlcnZlci5vYnNlcnZlKGlmcmFtZS5wYXJlbnROb2RlLCB7XG4gICAgICAgICAgY2hpbGRMaXN0OiB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2V0TXV0YXRpb25PYnNlcnZlcigpXG4gICAgICBpZiAoTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgICBjcmVhdGVEZXN0cm95T2JzZXJ2ZXIoTXV0YXRpb25PYnNlcnZlcilcbiAgICAgIH1cblxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihpZnJhbWUsICdsb2FkJywgaUZyYW1lTG9hZGVkKVxuICAgICAgdHJpZ2dlcignaW5pdCcsIG1zZywgaWZyYW1lLCB1bmRlZmluZWQsIHRydWUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgIGlmICgnb2JqZWN0JyAhPT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT3B0aW9ucyBpcyBub3QgYW4gb2JqZWN0JylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb3B5T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIGZvciAodmFyIG9wdGlvbiBpbiBkZWZhdWx0cykge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlZmF1bHRzLCBvcHRpb24pKSB7XG4gICAgICAgICAgc2V0dGluZ3NbaWZyYW1lSWRdW29wdGlvbl0gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9uXG4gICAgICAgICAgKVxuICAgICAgICAgICAgPyBvcHRpb25zW29wdGlvbl1cbiAgICAgICAgICAgIDogZGVmYXVsdHNbb3B0aW9uXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VGFyZ2V0T3JpZ2luKHJlbW90ZUhvc3QpIHtcbiAgICAgIHJldHVybiAnJyA9PT0gcmVtb3RlSG9zdCB8fFxuICAgICAgICBudWxsICE9PSByZW1vdGVIb3N0Lm1hdGNoKC9eKGFib3V0OmJsYW5rfGphdmFzY3JpcHQ6fGZpbGU6XFwvXFwvKS8pXG4gICAgICAgID8gJyonXG4gICAgICAgIDogcmVtb3RlSG9zdFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJpY2F0ZShrZXkpIHtcbiAgICAgIHZhciBzcGxpdE5hbWUgPSBrZXkuc3BsaXQoJ0NhbGxiYWNrJylcblxuICAgICAgaWYgKHNwbGl0TmFtZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdmFyIG5hbWUgPVxuICAgICAgICAgICdvbicgKyBzcGxpdE5hbWVbMF0uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzcGxpdE5hbWVbMF0uc2xpY2UoMSlcbiAgICAgICAgdGhpc1tuYW1lXSA9IHRoaXNba2V5XVxuICAgICAgICBkZWxldGUgdGhpc1trZXldXG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgaWZyYW1lSWQsXG4gICAgICAgICAgXCJEZXByZWNhdGVkOiAnXCIgK1xuICAgICAgICAgICAga2V5ICtcbiAgICAgICAgICAgIFwiJyBoYXMgYmVlbiByZW5hbWVkICdcIiArXG4gICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgIFwiJy4gVGhlIG9sZCBtZXRob2Qgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXCJcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgICBzZXR0aW5nc1tpZnJhbWVJZF0gPSB7XG4gICAgICAgIGZpcnN0UnVuOiB0cnVlLFxuICAgICAgICBpZnJhbWU6IGlmcmFtZSxcbiAgICAgICAgcmVtb3RlSG9zdDogaWZyYW1lLnNyYyAmJiBpZnJhbWUuc3JjLnNwbGl0KCcvJykuc2xpY2UoMCwgMykuam9pbignLycpXG4gICAgICB9XG5cbiAgICAgIGNoZWNrT3B0aW9ucyhvcHRpb25zKVxuICAgICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChkZXByaWNhdGUsIG9wdGlvbnMpXG4gICAgICBjb3B5T3B0aW9ucyhvcHRpb25zKVxuXG4gICAgICBpZiAoc2V0dGluZ3NbaWZyYW1lSWRdKSB7XG4gICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXS50YXJnZXRPcmlnaW4gPVxuICAgICAgICAgIHRydWUgPT09IHNldHRpbmdzW2lmcmFtZUlkXS5jaGVja09yaWdpblxuICAgICAgICAgICAgPyBnZXRUYXJnZXRPcmlnaW4oc2V0dGluZ3NbaWZyYW1lSWRdLnJlbW90ZUhvc3QpXG4gICAgICAgICAgICA6ICcqJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJlZW5IZXJlKCkge1xuICAgICAgcmV0dXJuIGlmcmFtZUlkIGluIHNldHRpbmdzICYmICdpRnJhbWVSZXNpemVyJyBpbiBpZnJhbWVcbiAgICB9XG5cbiAgICB2YXIgaWZyYW1lSWQgPSBlbnN1cmVIYXNJZChpZnJhbWUuaWQpXG5cbiAgICBpZiAoIWJlZW5IZXJlKCkpIHtcbiAgICAgIHByb2Nlc3NPcHRpb25zKG9wdGlvbnMpXG4gICAgICBzZXRTY3JvbGxpbmcoKVxuICAgICAgc2V0TGltaXRzKClcbiAgICAgIHNldHVwQm9keU1hcmdpblZhbHVlcygpXG4gICAgICBpbml0KGNyZWF0ZU91dGdvaW5nTXNnKGlmcmFtZUlkKSlcbiAgICAgIHNldHVwSUZyYW1lT2JqZWN0KClcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihpZnJhbWVJZCwgJ0lnbm9yZWQgaUZyYW1lLCBhbHJlYWR5IHNldHVwLicpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VjZShmbiwgdGltZSkge1xuICAgIGlmIChudWxsID09PSB0aW1lcikge1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICAgIGZuKClcbiAgICAgIH0sIHRpbWUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGZyYW1lVGltZXIgPSB7fVxuICBmdW5jdGlvbiBkZWJvdW5jZUZyYW1lRXZlbnRzKGZuLCB0aW1lLCBmcmFtZUlkKSB7XG4gICAgaWYgKCFmcmFtZVRpbWVyW2ZyYW1lSWRdKSB7XG4gICAgICBmcmFtZVRpbWVyW2ZyYW1lSWRdID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZyYW1lVGltZXJbZnJhbWVJZF0gPSBudWxsXG4gICAgICAgIGZuKClcbiAgICAgIH0sIHRpbWUpXG4gICAgfVxuICB9XG5cbiAgLy8gTm90IHRlc3RhYmxlIGluIFBoYW50b21KU1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG4gIGZ1bmN0aW9uIGZpeEhpZGRlbklGcmFtZXMoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tJRnJhbWVzKCkge1xuICAgICAgZnVuY3Rpb24gY2hlY2tJRnJhbWUoc2V0dGluZ0lkKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNoa0RpbWVuc2lvbihkaW1lbnNpb24pIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJzBweCcgPT09XG4gICAgICAgICAgICAoc2V0dGluZ3Nbc2V0dGluZ0lkXSAmJiBzZXR0aW5nc1tzZXR0aW5nSWRdLmlmcmFtZS5zdHlsZVtkaW1lbnNpb25dKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVmlzaWJsZShlbCkge1xuICAgICAgICAgIHJldHVybiBudWxsICE9PSBlbC5vZmZzZXRQYXJlbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBzZXR0aW5nc1tzZXR0aW5nSWRdICYmXG4gICAgICAgICAgaXNWaXNpYmxlKHNldHRpbmdzW3NldHRpbmdJZF0uaWZyYW1lKSAmJlxuICAgICAgICAgIChjaGtEaW1lbnNpb24oJ2hlaWdodCcpIHx8IGNoa0RpbWVuc2lvbignd2lkdGgnKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdHJpZ2dlcihcbiAgICAgICAgICAgICdWaXNpYmlsaXR5IGNoYW5nZScsXG4gICAgICAgICAgICAncmVzaXplJyxcbiAgICAgICAgICAgIHNldHRpbmdzW3NldHRpbmdJZF0uaWZyYW1lLFxuICAgICAgICAgICAgc2V0dGluZ0lkXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5rZXlzKHNldHRpbmdzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY2hlY2tJRnJhbWUoa2V5KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtdXRhdGlvbk9ic2VydmVkKG11dGF0aW9ucykge1xuICAgICAgbG9nKFxuICAgICAgICAnd2luZG93JyxcbiAgICAgICAgJ011dGF0aW9uIG9ic2VydmVkOiAnICsgbXV0YXRpb25zWzBdLnRhcmdldCArICcgJyArIG11dGF0aW9uc1swXS50eXBlXG4gICAgICApXG4gICAgICBkZWJvdWNlKGNoZWNrSUZyYW1lcywgMTYpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JyksXG4gICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgIGF0dHJpYnV0ZU9sZFZhbHVlOiBmYWxzZSxcbiAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgIGNoYXJhY3RlckRhdGFPbGRWYWx1ZTogZmFsc2UsXG4gICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbk9ic2VydmVkKVxuXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwgY29uZmlnKVxuICAgIH1cblxuICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2V0TXV0YXRpb25PYnNlcnZlcigpXG4gICAgaWYgKE11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIGNyZWF0ZU11dGF0aW9uT2JzZXJ2ZXIoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZUlGcmFtZXMoZXZlbnQpIHtcbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICBzZW5kVHJpZ2dlck1zZygnV2luZG93ICcgKyBldmVudCwgJ3Jlc2l6ZScpXG4gICAgfVxuXG4gICAgbG9nKCd3aW5kb3cnLCAnVHJpZ2dlciBldmVudDogJyArIGV2ZW50KVxuICAgIGRlYm91Y2UocmVzaXplLCAxNilcbiAgfVxuXG4gIC8vIE5vdCB0ZXN0YWJsZSBpbiBQaGFudG9tSlNcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgZnVuY3Rpb24gdGFiVmlzaWJsZSgpIHtcbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICBzZW5kVHJpZ2dlck1zZygnVGFiIFZpc2FibGUnLCAncmVzaXplJylcbiAgICB9XG5cbiAgICBpZiAoJ2hpZGRlbicgIT09IGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSkge1xuICAgICAgbG9nKCdkb2N1bWVudCcsICdUcmlnZ2VyIGV2ZW50OiBWaXNpYmxpdHkgY2hhbmdlJylcbiAgICAgIGRlYm91Y2UocmVzaXplLCAxNilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZW5kVHJpZ2dlck1zZyhldmVudE5hbWUsIGV2ZW50KSB7XG4gICAgZnVuY3Rpb24gaXNJRnJhbWVSZXNpemVFbmFibGVkKGlmcmFtZUlkKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBzZXR0aW5nc1tpZnJhbWVJZF0gJiZcbiAgICAgICAgJ3BhcmVudCcgPT09IHNldHRpbmdzW2lmcmFtZUlkXS5yZXNpemVGcm9tICYmXG4gICAgICAgIHNldHRpbmdzW2lmcmFtZUlkXS5hdXRvUmVzaXplICYmXG4gICAgICAgICFzZXR0aW5nc1tpZnJhbWVJZF0uZmlyc3RSdW5cbiAgICAgIClcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhzZXR0aW5ncykuZm9yRWFjaChmdW5jdGlvbiAoaWZyYW1lSWQpIHtcbiAgICAgIGlmIChpc0lGcmFtZVJlc2l6ZUVuYWJsZWQoaWZyYW1lSWQpKSB7XG4gICAgICAgIHRyaWdnZXIoZXZlbnROYW1lLCBldmVudCwgc2V0dGluZ3NbaWZyYW1lSWRdLmlmcmFtZSwgaWZyYW1lSWQpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdtZXNzYWdlJywgaUZyYW1lTGlzdGVuZXIpXG5cbiAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc2l6ZUlGcmFtZXMoJ3Jlc2l6ZScpXG4gICAgfSlcblxuICAgIGFkZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQsICd2aXNpYmlsaXR5Y2hhbmdlJywgdGFiVmlzaWJsZSlcblxuICAgIGFkZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQsICctd2Via2l0LXZpc2liaWxpdHljaGFuZ2UnLCB0YWJWaXNpYmxlKVxuICB9XG5cbiAgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbiAgICBmdW5jdGlvbiBpbml0KG9wdGlvbnMsIGVsZW1lbnQpIHtcbiAgICAgIGZ1bmN0aW9uIGNoa1R5cGUoKSB7XG4gICAgICAgIGlmICghZWxlbWVudC50YWdOYW1lKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0IGlzIG5vdCBhIHZhbGlkIERPTSBlbGVtZW50JylcbiAgICAgICAgfSBlbHNlIGlmICgnSUZSQU1FJyAhPT0gZWxlbWVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0V4cGVjdGVkIDxJRlJBTUU+IHRhZywgZm91bmQgPCcgKyBlbGVtZW50LnRhZ05hbWUgKyAnPidcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgY2hrVHlwZSgpXG4gICAgICAgIHNldHVwSUZyYW1lKGVsZW1lbnQsIG9wdGlvbnMpXG4gICAgICAgIGlGcmFtZXMucHVzaChlbGVtZW50KVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm5EZXByZWNhdGVkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVuYWJsZVB1YmxpY01ldGhvZHMpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnZW5hYmxlUHVibGljTWV0aG9kcyBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZCwgcHVibGljIG1ldGhvZHMgYXJlIG5vdyBhbHdheXMgYXZhaWxhYmxlIGluIHRoZSBpRnJhbWUnXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaUZyYW1lc1xuXG4gICAgc2V0dXBSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKVxuICAgIHNldHVwRXZlbnRMaXN0ZW5lcnMoKVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlGcmFtZVJlc2l6ZUYob3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICBpRnJhbWVzID0gW10gLy8gT25seSByZXR1cm4gaUZyYW1lcyBwYXN0IGluIG9uIHRoaXMgY2FsbFxuXG4gICAgICB3YXJuRGVwcmVjYXRlZE9wdGlvbnMob3B0aW9ucylcblxuICAgICAgc3dpdGNoICh0eXBlb2YgdGFyZ2V0KSB7XG4gICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0IHx8ICdpZnJhbWUnKSxcbiAgICAgICAgICAgIGluaXQuYmluZCh1bmRlZmluZWQsIG9wdGlvbnMpXG4gICAgICAgICAgKVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBpbml0KG9wdGlvbnMsIHRhcmdldClcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBkYXRhIHR5cGUgKCcgKyB0eXBlb2YgdGFyZ2V0ICsgJyknKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaUZyYW1lc1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUpRdWVyeVB1YmxpY01ldGhvZCgkKSB7XG4gICAgaWYgKCEkLmZuKSB7XG4gICAgICBpbmZvKCcnLCAnVW5hYmxlIHRvIGJpbmQgdG8galF1ZXJ5LCBpdCBpcyBub3QgZnVsbHkgbG9hZGVkLicpXG4gICAgfSBlbHNlIGlmICghJC5mbi5pRnJhbWVSZXNpemUpIHtcbiAgICAgICQuZm4uaUZyYW1lUmVzaXplID0gZnVuY3Rpb24gJGlGcmFtZVJlc2l6ZUYob3B0aW9ucykge1xuICAgICAgICBmdW5jdGlvbiBpbml0KGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgc2V0dXBJRnJhbWUoZWxlbWVudCwgb3B0aW9ucylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcignaWZyYW1lJykuZWFjaChpbml0KS5lbmQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh3aW5kb3cualF1ZXJ5KSB7XG4gICAgY3JlYXRlSlF1ZXJ5UHVibGljTWV0aG9kKHdpbmRvdy5qUXVlcnkpXG4gIH1cblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5KVxuICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlIGZvciBicm93c2VyZnlcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKVxuICB9XG4gIHdpbmRvdy5pRnJhbWVSZXNpemUgPSB3aW5kb3cuaUZyYW1lUmVzaXplIHx8IGZhY3RvcnkoKVxufSkoKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/iframe-resizer/js/iframeResizer.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/js/comments.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});